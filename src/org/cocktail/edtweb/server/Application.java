package org.cocktail.edtweb.server;
// Generated by the WOLips Core

import java.text.SimpleDateFormat;

import com.webobjects.appserver.WOApplication;
import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WORedirect;
import com.webobjects.appserver.WOResourceManager;
import com.webobjects.appserver.WOResponse;
import com.webobjects.foundation.NSLog;
import com.webobjects.foundation.NSTimeZone;
import com.webobjects.foundation.NSTimestamp;

import fr.univlr.cri.util.StringCtrl;
import fr.univlr.cri.webapp.CRIMailBus;
import fr.univlr.cri.webapp.CRIWebApplication;
import fr.univlr.cri.webapp.CRIWebSession;
import fr.univlr.cri.webapp.LRLog;
import fr.univlr.cri.webapp.LRUserInfo;
import fr.univlr.cri.webapp.VersionCocktail;
import fr.univlr.cri.webext.CRIAlertPage;
import fr.univlr.cri.webext.CRIAlertResponder;

public class Application extends CRIWebApplication {

	private static final String MAIN_MODEL_NAME = "EDTWeb";
	private static final String CONFIG_FILE_NAME = "EDTWeb.config";
	private static final String CONFIG_TABLE_NAME = "ul_GrhumParametres";

	// Paramètres obligatoires / optionnels (dans le configFileName et le configTableName) ?
	private static final String[] CONFIG_MANDATORY_KEYS = new String[] { "APP_ID" };
	private static final String[] CONFIG_OPTIONAL_KEYS = new String[] { "APP_ALIAS", "APP_USE_DIPLOMES", "APP_USE_EXAMENS", "SAUT_URL", "SQL_DEBUG",
			"EMAIL_REDIRECTION", "EMAIL_ERREUR", "APP_USE_CAS", "HEURE_DEBUT", "HEURE_FIN", "URL_SUPERPLAN", "FORMAT_PLANNING",
			"FORMAT_PLANNING_GRP", "NB_WEEK_ICAL", "ACTIVATION_MODIF", "ACTIVATION_SUPP", "APP_URL" };

	private VersionCocktail _appVersionCocktail = null;
	private VersionCocktail _appVersionCocktailDB = null;

	// Collecte des informations ou non ??
	private static final boolean COCKTAIL_COLLECTE = true;

	public static void main(final String argv[]) {
		WOApplication.main(argv, Application.class);
	}

	public Application() {
		super();
		setPageRefreshOnBacktrackEnabled(true);

		rawLogModelInfos();
		checkModel();
		rawLogVersionInfos();

		if (config().booleanForKey("SQL_DEBUG")) {
			NSLog.setAllowedDebugGroups(NSLog.DebugLevelDetailed);
			NSLog.allowDebugLoggingForGroups(NSLog.DebugGroupSQLGeneration);
			NSLog.allowDebugLoggingForGroups(NSLog.DebugGroupDatabaseAccess);
		}

		rawLogAppInfos();

		// settage du timezone
		String tzString = null;
		if (config() != null) {
			tzString = config().stringForKey("DEFAULT_TIME_ZONE");
		}
		if (tzString == null) {
			tzString = "Europe/Paris";
		}
		java.util.TimeZone tz = java.util.TimeZone.getTimeZone(tzString);
		java.util.TimeZone.setDefault(tz);
		NSTimeZone.setDefault(tz);

		LRLog.setLevel(LRLog.LEVEL_DEBUG);
	}

	public String configFileName() {
		return CONFIG_FILE_NAME;
	}

	public String configTableName() {
		return CONFIG_TABLE_NAME;
	}

	public String mainModelName() {
		return MAIN_MODEL_NAME;
	}

	public boolean appShouldSendCollecte() {
		return COCKTAIL_COLLECTE;
	}

	public String[] configMandatoryKeys() {
		return CONFIG_MANDATORY_KEYS;
	}

	public String[] configOptionalKeys() {
		return CONFIG_OPTIONAL_KEYS;
	}

	public VersionCocktail appVersionCocktail() {
		if (_appVersionCocktail == null) {
			_appVersionCocktail = new Version();
		}
		return _appVersionCocktail;
	}

	public VersionCocktail appVersionCocktailDb() {
		if (_appVersionCocktailDB == null) {
			_appVersionCocktailDB = new VersionDB();
		}
		return _appVersionCocktailDB;
	}

	//

	public String emailDeRedirection() {
		return config().stringForKey("EMAIL_REDIRECTION");
	}

	public String srcfondULR() {
		if (config().stringForKey("IMAGE_FOND") == null) {
			return getImageDefaultURL("fond.gif");
		}
		else {
			return getImageDefaultURL(config().stringForKey("IMAGE_FOND"));
		}
	}

	public String urlEdtScol() {
		return config().stringForKey("URL_SUPERPLAN");
	}

	public String urlServeurPlanning() {
		return config().stringForKey("URL_SERVEUR_PLANNING");
	}

	public String appUrl() {
		return config().stringForKey("APP_URL");
	}

	// fonctions de config
	public int heureDebutParDefaut() {
		return config().intForKey("HEURE_DEBUT");
	}

	public int heureFinParDefaut() {
		return config().intForKey("HEURE_FIN");
	}

	public int nbWeekIcal() {
		return config().intForKey("NB_WEEK_ICAL");
	}

	public boolean activationModif() {
		return config().intForKey("ACTIVATION_MODIF") == 1;
	}

	public boolean activationSupp() {
		return config().intForKey("ACTIVATION_SUPP") == 1;
	}

	public String loginAdmin() {
		return config().stringForKey("LOGIN_ADMIN");
	}

	public boolean useDiplomes() {
		return config().booleanForKey("APP_USE_DIPLOMES");
	}

	public boolean useExamens() {
		return config().booleanForKey("APP_USE_EXAMENS");
	}

	public boolean useServeurPlanning() {
		return config().booleanForKey("APP_USE_SERVEUR_PLANNING");
	}

	public String urlImage(final String nameImage, final WOContext context) {
		final WOContext aContext = context;
		final WOResourceManager rm = application().resourceManager();
		final String aFilename = nameImage;
		final String aFramework = "app";
		return rm.urlForResourceNamed(aFilename, aFramework, aContext.session().languages(), aContext.request());
	}

	public String srcLogoULR() {
		return getImageURL("MAIN_LOGO_URL", "ULRLogo90.gif");
	}

	public String srcKeyULR() {
		return getImageDefaultURL("clefs.gif");
	}

	public String srcLigneJauneULR() {
		return getImageDefaultURL("ligneApplisDegradee.gif");
	}

	public String menuBackgroundImage() {
		if (config().stringForKey("IMAGE_FOND_MENU") == null) {
			return getImageDefaultURL("fondMenu.jpg");
		}
		else {
			return getImageDefaultURL(config().stringForKey("IMAGE_FOND_MENU"));
		}
	}

	public String formatNomPDF() {
		return config().stringForKey("FORMAT_PLANNING");
	}

	public String formatNomPDFGrp() {
		return config().stringForKey("FORMAT_PLANNING_GRP");
	}

	public String emailHandleException() {
		String s = config().stringForKey("EMAIL_ERREUR");
		if (s == null || s.trim().length() == 0) {
			return null;
		}
		return s;
	}

	public String coulTClair() {
		return config().stringForKey("COULTCLAIR");
	}

	public String coulClair() {
		return config().stringForKey("COULCLAIR");
	}

	public String coulFonce() {
		return config().stringForKey("COULFONCE");
	}

	public String coulTFonce() {
		return config().stringForKey("COULTFONCE");
	}

	public WOResponse handleException(final Exception anException, final WOContext aContext) {
		LRUserInfo user = null;
		if (aContext != null && aContext.session() != null) {
			user = ((CRIWebSession) aContext.session()).connectedUserInfo();
		}
		String message = "";
		String emailUser = emailHandleException();
		if (user != null && user.errorCode() == 0) {
			message = "L'utilisateur " + user.nomEtPrenom();
			emailUser = user.email();
		}
		else {
			message = "Un utilisateur non identifié ";
		}
		message = message + " a provoqué une exception sur l'application " + name() + "\n le "
				+ (new SimpleDateFormat("d MMM yyyy '\340' HH:mm:ss")).format(new NSTimestamp());
		message = message + " depuis l'ip = " + getRequestIPAddress(aContext.request());
		message = message + "\n\nDétail du problème : \n\n";
		message = message + stackTraceToString(anException, false);
		message = message + "\n\n\nDétail de la cause du problème : \n\n";
		message = message + stackTraceToString(anException.getCause(), false);
		final CRIMailBus mailBus = new CRIMailBus(config());
		if (emailHandleException() != null) {
			mailBus.sendMail(emailUser, emailHandleException(), null, "[Bug] " + name(), message);
		}
		final WOComponent page = pageErreur("Erreur application " + name(), "Une erreur s'est produite dans l'application " + name(),
				"Trace de l'application", stackTraceToString(anException, false), aContext);
		WOResponse response = super.handleException(anException, aContext);
		response = page.generateResponse();
		return response;
	}

	public WOComponent pageErreur(final String titre, String message, final String detailMessage1, final String detailMessage2,
			final WOContext aContext) {
		if (detailMessage1 != null && detailMessage2 != null) {
			message = message + "<br><br>" + detailMessage1 + "<br><br><textarea cols='75' rows='15'>" + detailMessage2 + "</textarea><br><br>";
		}
		final CRIAlertPage _page = (CRIAlertPage) pageWithName("CRIAlertPage", aContext);
		_page.showMessage(aContext.component(), titre, message, "Accueil application", "Accueil site", null, CRIAlertPage.ERROR,
				new PageErreurResponder(aContext));
		return _page;
	}

	private class PageErreurResponder implements CRIAlertResponder {

		private final WOContext _context;

		public PageErreurResponder(final WOContext aContext) {
			this._context = aContext;
		}

		public WOComponent respondToButton(final int arg0) {
			switch (arg0) {
			case 1:
				WORedirect nextPageAppHome = (WORedirect) pageWithName("WORedirect", _context);
				nextPageAppHome.setUrl(getApplicationURL(_context));
				return nextPageAppHome;
			case 2:
				WORedirect nextPageSiteHome = (WORedirect) pageWithName("WORedirect", _context);
				String url = mainWebSiteURL();
				if (StringCtrl.normalize(url).length() == 0) {
					url = getApplicationURL(_context);
				}
				nextPageSiteHome.setUrl(url);
				return nextPageSiteHome;
			}
			return null;
		}
	}

	private static String stackTraceToString(final Throwable e, final boolean useHtml) {
		if (e == null) {
			return "null";
		}
		String tagCR = "\n";
		if (useHtml) {
			tagCR = "<br>";
		}
		String stackStr = e.getMessage() + tagCR + tagCR;
		stackStr = stackStr + e.toString() + tagCR + tagCR;
		final StackTraceElement stack[] = e.getStackTrace();
		for (int i = 0; i < stack.length; i++) {
			stackStr = stackStr + stack[i].toString() + tagCR;
		}

		return stackStr;
	}

	public boolean _isSupportedDevelopmentPlatform() {
		return (super._isSupportedDevelopmentPlatform() || System.getProperty("os.name").startsWith("Windows"));
	}
}
package org.cocktail.edtweb.server.components;
/*
 * Copyright CRI - Universite de La Rochelle, 1995-2004
 * 
 * This software is governed by the CeCILL license under French law and abiding by the rules of distribution of free software. You can use,
 * modify and/or redistribute the software under the terms of the CeCILL license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * 
 * As a counterpart to the access to the source code and rights to copy, modify and redistribute granted by the license, users are provided
 * only with a limited warranty and the software's author, the holder of the economic rights, and the successive licensors have only limited
 * liability.
 * 
 * In this respect, the user's attention is drawn to the risks associated with loading, using, modifying and/or developing or reproducing
 * the software by the user in light of its specific status of free software, that may mean that it is complicated to manipulate, and that
 * also therefore means that it is reserved for developers and experienced professionals having in-depth computer knowledge. Users are
 * therefore encouraged to load and test the software's suitability as regards their requirements in conditions enabling the security of
 * their systems and/or data to be ensured and, more generally, to use and operate it in the same conditions as regards security.
 * 
 * The fact that you are presently reading this means that you have had knowledge of the CeCILL license and that you accept its terms.
 */
// Generated by the WOLips Core at Wed Nov 03 09:34:25 CET 2004
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;

import org.cocktail.edtweb.server.Application;
import org.cocktail.edtweb.server.EDTObject;
import org.cocktail.edtweb.server.Jour;
import org.cocktail.edtweb.server.metier.IndividuUlr;
import org.cocktail.edtweb.server.metier.Occupant;
import org.cocktail.edtweb.server.metier.Periodicite;
import org.cocktail.edtweb.server.metier.Reservation;

import com.webobjects.appserver.WOContext;
import com.webobjects.eocontrol.EOAndQualifier;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSTimestamp;
import com.webobjects.foundation.NSTimestampFormatter;

import fr.univlr.cri.util.wo5.DateCtrl;
import fr.univlr.cri.webapp.CRIMailBus;
import fr.univlr.cri.webapp.CRIWebPage;
import fr.univlr.cri.webapp.LRLog;
import fr.univlr.cri.webapp.LRUserInfo;
import fr.univlr.cri.webapp.LRUserInfoDB;

public class ModifierOccupationIndividu extends CRIWebPage {
	private static final long serialVersionUID = -5943807057357683788L;
	public static String FORMATER = "%d/%m/%Y %H:%M";
	public String erreurEnregistrement;
	protected String dateDebut;
	protected String dateFin;
	protected String dateDInit; // ***LUDO
	protected String dateFInit; // ***LUDO
	protected String objetResa; // **LUDO
	protected String commentaire;
	public EDTObject aResaDate;
	private final GregorianCalendar debut = new GregorianCalendar();
	private final GregorianCalendar fin = new GregorianCalendar();
	public HashMap wsMap;
	private static final String OBJET_RESA = "ResaDate";

	public ModifierOccupationIndividu(final WOContext context) {
		super(context);
		aResaDate = new EDTObject(criApp.dataBus());

		if (!(session().objectForKey(OBJET_RESA)).getClass().getName().equals("EDTObject")) {
			aResaDate.initObjet(session().objectForKey(OBJET_RESA), EDTObject.TYPE_PERIODICITE);
		}
		else {
			aResaDate = (EDTObject) session().objectForKey(OBJET_RESA);
		}
		setDateDebut(DateCtrl.dateToString(aResaDate.dateDebut(), FORMATER));
		setDateFin(DateCtrl.dateToString(aResaDate.dateFin(), FORMATER));
		setCommentaire(aResaDate.sujet());
		enrRDVInit();
		aResaDate.setOrdre(aResaDate.key());
	}

	public EOEditingContext localEContext() {
		return session().defaultEditingContext();
	}

	public AffichageInfoReservation Annuler() {
		final AffichageInfoReservation nextPage = (AffichageInfoReservation) pageWithName("AffichageInfoReservation");

		// Initialize your component here

		return nextPage;
	}

	// ************LUDO
	private Number noIndividu() {
		if (session().objectForKey(EDTIndividuChoisi.INDIVIDU_CHOISI) != null
				&& session().objectForKey(EDTIndividuChoisi.INDIVIDU_CHOISI) != NullValue) {
			return ((LRUserInfo) session().objectForKey(EDTIndividuChoisi.INDIVIDU_CHOISI)).noIndividu();
		}
		return criSession().connectedUserInfo().noIndividu();
	}

	// ****LUDO
	public void enrRDVInit() {
		dateDInit = DateCtrl.dateToString(aResaDate.dateDebut(), FORMATER);
		dateFInit = DateCtrl.dateToString(aResaDate.dateFin(), FORMATER);
		objetResa = aResaDate.sujet();
		// *****CREATION DE DEUX OBJETS DE TYPE JOUR REPRESENTANT LES ANCIENS JOUR DEB ET FIN DE LA RESA
		final String[] tmpDeb = dateDInit.split(" ");
		final String[] tmpFin = dateFInit.split(" ");
		String jourStr = tmpDeb[0];
		String heureStr = tmpDeb[1];
		int annee = getAnnee(jourStr);
		int mois = getMois(jourStr);
		int jour = getJour(jourStr);
		int heure = getHeure(heureStr);
		int min = getMinute(heureStr);

		final GregorianCalendar debutInit = new GregorianCalendar();
		debutInit.setFirstDayOfWeek(Calendar.MONDAY);
		debutInit.setMinimalDaysInFirstWeek(4);
		debutInit.set(Calendar.YEAR, annee);
		debutInit.set(Calendar.MONTH, mois - 1); // /***LUDO
		debutInit.set(Calendar.DAY_OF_MONTH, jour);
		debutInit.set(Calendar.HOUR_OF_DAY, heure);
		debutInit.set(Calendar.MINUTE, min);
		debutInit.set(Calendar.SECOND, 0);
		debutInit.set(Calendar.MILLISECOND, 0);
		debutInit.setTime(debutInit.getTime());

		jourStr = tmpFin[0];
		heureStr = tmpFin[1];
		annee = getAnnee(jourStr);
		mois = getMois(jourStr);
		jour = getJour(jourStr);
		heure = getHeure(heureStr);
		min = getMinute(heureStr);
		final GregorianCalendar finInit = new GregorianCalendar();
		finInit.setFirstDayOfWeek(Calendar.MONDAY);
		finInit.setMinimalDaysInFirstWeek(4);
		finInit.set(Calendar.YEAR, annee);
		finInit.set(Calendar.MONTH, mois - 1); // ******LUDO
		finInit.set(Calendar.DAY_OF_MONTH, jour);
		finInit.set(Calendar.HOUR_OF_DAY, heure);
		finInit.set(Calendar.MINUTE, min);
		finInit.set(Calendar.SECOND, 0);
		finInit.set(Calendar.MILLISECOND, 0);
		finInit.setTime(finInit.getTime());

		final Jour jourdebInit = new Jour(debutInit);
		final Jour jourfinInit = new Jour(finInit);

		// **La je les range dans l objet de session ainsi que le texte
		session().setObjectForKey(jourdebInit, "jourDInit");
		session().setObjectForKey(jourfinInit, "jourFInit");
		session().setObjectForKey(objetResa, "objetRInit");
	}

	// ying modifier
	public AffichageInfoReservation validerModification() {
		final AffichageInfoReservation nextPage = (AffichageInfoReservation) pageWithName("AffichageInfoReservation");

		if (aResaDate.getTypeObjet() == EDTObject.TYPE_PERIODICITE) {
			if (modificationDansEDTScol()) {
				return nextPage;
			}
		}

		// Initialize your component here
		return null;
	}

	public boolean modificationDansEDTScol() {
		if (!getGregorianCalendarDates()) {
			return false;
		}

		Reservation laResa = (Reservation) criApp.dataBus().fetchObject(localEContext(), Reservation.ENTITY_NAME,
				EOQualifier.qualifierWithQualifierFormat(Reservation.RESA_KEY_KEY + " = %@", new NSArray(aResaDate.resaKey())));
		IndividuUlr individuAgent = (IndividuUlr) criApp.dataBus().fetchObject(
				localEContext(),
				IndividuUlr.ENTITY_NAME,
				EOQualifier.qualifierWithQualifierFormat(IndividuUlr.NO_INDIVIDU_KEY + " = %@", new NSArray(criSession().connectedUserInfo()
						.noIndividu())));

		if ((laResa.reservationObjets() != null && laResa.reservationObjets().count() > 0)
				|| (laResa.tosResaExam() != null && laResa.tosResaExam().count() > 0)
				|| (laResa.tosResaSalles() != null && laResa.tosResaSalles().count() > 0)
				|| (laResa.tosReservationAp() != null && laResa.tosReservationAp().count() > 0)) {
			return false;
		}

		if (!laResa.tlocCode().equals("r") && !laResa.tlocCode().equals("s") && !laResa.tlocCode().equals("p")) {
			erreurEnregistrement = "Cette réservation n'est pas de type réunion, modification interdite !";
			return false;
		}

		if (laResa.periodicites() != null && laResa.periodicites().count() != 1) {
			erreurEnregistrement = "Ce n'est pas une réservation simple, modification interdite !";
			return false;
		}

		// verif dispo individu
		NSMutableArray quals = new NSMutableArray(2);
		quals.addObject(EOQualifier.qualifierWithQualifierFormat(Periodicite.DATE_FIN_KEY + " > %@ and " + Periodicite.DATE_DEB_KEY + " < %@",
				new NSArray(new Object[] { new NSTimestamp(debut.getTimeInMillis()), new NSTimestamp(fin.getTimeInMillis()) })));
		quals.addObject(EOQualifier.qualifierWithQualifierFormat(Periodicite.RESERVATION_KEY + "." + Reservation.TOS_OCCUPANT_KEY + "."
				+ Occupant.NO_INDIVIDU_KEY + " = %@", new NSArray(noIndividu())));
		quals.addObject(EOQualifier.qualifierWithQualifierFormat(Periodicite.RESERVATION_KEY + " != %@", new NSArray(laResa)));
		NSArray a = criApp.dataBus().fetchArray(localEContext(), Periodicite.ENTITY_NAME, new EOAndQualifier(quals), null);
		if (a != null && a.count() > 0) {
			erreurEnregistrement = "Individu non libre, modification interdite !";
			return false;
		}

		// modif
		laResa.setDModification(new NSTimestamp());
		laResa.setIndividuUlrRelationship(individuAgent);
		laResa.setNoIndividuClient((Integer) criSession().connectedUserInfo().noIndividu());
		laResa.setResaCommentaire(commentaire());
		((Periodicite) laResa.periodicites().objectAtIndex(0)).setDateDeb(new NSTimestamp(debut.getTimeInMillis()));
		((Periodicite) laResa.periodicites().objectAtIndex(0)).setDateFin(new NSTimestamp(fin.getTimeInMillis()));
		boolean doitCreerOccupant;
		if (laResa.tosOccupant() == null || laResa.tosOccupant().count() == 0) {
			doitCreerOccupant = true;
		}
		else {
			doitCreerOccupant = true;
			for (int i = 0; i < laResa.tosOccupant().count(); i++) {
				Occupant o = (Occupant) laResa.tosOccupant().objectAtIndex(i);
				if (o.noIndividu().intValue() == noIndividu().intValue()) {
					doitCreerOccupant = false;
					break;
				}
			}
		}
		if (doitCreerOccupant) {
			laResa.addToTosOccupantRelationship(Occupant.createOccupant(localEContext(), new Integer(0), (Integer) noIndividu(), laResa));
		}

		localEContext().lock();
		try {
			localEContext().saveChanges();
		}
		catch (Exception exe) {
			exe.printStackTrace();
			localEContext().revert();
			return false;
		}
		finally {
			localEContext().unlock();
		}

		aResaDate.setDateDebut(new NSTimestamp(debut.getTimeInMillis()));
		aResaDate.setDateFin(new NSTimestamp(fin.getTimeInMillis()));
		aResaDate.setSujet(commentaire());

		return true;
	}

	public void sendMail(final int type, final String commentaire_old, final NSMutableArray periodicites_old, final String commentaire,
			final NSMutableArray periodicites, final String subjet) {
		final String expediteur = criSession().connectedUserInfo().email();
		final String destinateur = localUser().email();
		final StringBuffer msg = new StringBuffer();
		if (type == 1) {
			msg.append("Vous etes convi\u00e9(e)s \u00e0 la r\u00e9union suivante : ");
		}
		else
			if (type == 3) {
				msg.append("La r\u00e9union suivante a \u00e9t\u00e9 annul\u00e9e : ");
			}
			else
				if (type == 2) {
					msg.append("La r\u00e9union suivante a \u00e9t\u00e9 modifi\u00e9e : ");
					msg.append("\n" + commentaire_old);
					for (int i = 0; i < periodicites_old.count(); i += 2) {
						msg.append("\n\nde ");
						final Jour debut = (Jour) periodicites_old.objectAtIndex(i);
						final Jour fin = (Jour) periodicites_old.objectAtIndex(i + 1);
						msg.append(DateCtrl.dateToString(debut.toNSTimestamp(), FORMATER));
						msg.append("\n " + " \u00e0 ");
						msg.append(DateCtrl.dateToString(fin.toNSTimestamp(), FORMATER));
						msg.append("\n\n");
					}

					msg.append("Nouvelles informations : ");
					msg.append("\n");
				}
		msg.append("\n" + commentaire);
		// recherche des destinataires
		for (int i = 0; i < periodicites.count(); i += 2) {
			msg.append("\n\nde ");
			final Jour debut = (Jour) periodicites.objectAtIndex(i);
			final Jour fin = (Jour) periodicites.objectAtIndex(i + 1);
			// NSTimestampFormatter formatter = new NSTimestampFormatter(FORMATER);
			msg.append(DateCtrl.dateToString(debut.toNSTimestamp(), FORMATER));
			msg.append("\n " + " \u00e0 ");
			msg.append(DateCtrl.dateToString(fin.toNSTimestamp(), FORMATER));
		}

		msg.append("\n\n\nCordialement\n\n");
		msg.append(criSession().connectedUserInfo().prenom() + " " + criSession().connectedUserInfo().nom());

		final CRIMailBus mailBus = new CRIMailBus(criApp.config());
		mailBus.sendMail(expediteur, destinateur, null, subjet, msg.toString());

	}

	// fin modifier

	public boolean getGregorianCalendarDates() {
		if ((NSTimestamp) (new NSTimestampFormatter("%d/%m/%Y %H:%M")).parseObject(dateDebut(), new ParsePosition(0)) == null) {
			erreurEnregistrement = "Date de debut: format incorect (jj/mm/yyyy HH:MM)";
			return false;
		}
		if ((NSTimestamp) (new NSTimestampFormatter("%d/%m/%Y %H:%M")).parseObject(dateFin(), new ParsePosition(0)) == null) {
			erreurEnregistrement = "Date de fin: format incorect (jj/mm/yyyy HH:MM)";
			return false;
		}

		final String[] tmpDeb = dateDebut().split(" ");
		final String[] tmpFin = dateFin().split(" ");

		if (tmpDeb.length != 2) {
			erreurEnregistrement = "Date de debut: format incorect (jj/mm/yyyy HH:MM)";
			return false;
		}

		if (tmpFin.length != 2) {
			erreurEnregistrement = "Date de fin: format incorect (jj/mm/yyyy HH:MM)";
			return false;
		}

		String jourStr = tmpDeb[0];
		String heureStr = tmpDeb[1];

		int annee = getAnnee(jourStr);
		int mois = getMois(jourStr);
		int jour = getJour(jourStr);
		int heure = getHeure(heureStr);
		int min = getMinute(heureStr);
		if (annee < 0 || mois < 0 || jour < 0 || heure < 0 || min < 0) {
			erreurEnregistrement = "Date de debut: format incorect (jj/mm/yyyy HH:MM)";
			return false;
		}
		debut.setFirstDayOfWeek(Calendar.MONDAY);
		// La première semaine est celle qui contient
		// le premier jeudi de Janvier
		debut.setMinimalDaysInFirstWeek(4);
		// debut.setTimeZone(TimeZone.getTimeZone("Europe/Paris"));
		debut.set(Calendar.YEAR, annee);
		debut.set(Calendar.MONTH, mois - 1); // /***LUDO
		debut.set(Calendar.DAY_OF_MONTH, jour);
		debut.set(Calendar.HOUR_OF_DAY, heure);
		debut.set(Calendar.MINUTE, min);
		debut.set(Calendar.SECOND, 0);
		debut.set(Calendar.MILLISECOND, 0);
		debut.setTime(debut.getTime());

		jourStr = tmpFin[0];
		heureStr = tmpFin[1];
		annee = getAnnee(jourStr);
		mois = getMois(jourStr);
		jour = getJour(jourStr);
		heure = getHeure(heureStr);
		min = getMinute(heureStr);
		if (annee < 0 || mois < 0 || jour < 0 || heure < 0 || min < 0) {
			erreurEnregistrement = "Date de fin: format incorect (jj/mm/yyyy HH:MM)";
			return false;
		}
		fin.setFirstDayOfWeek(Calendar.MONDAY);
		// La première semaine est celle qui contient
		// le premier jeudi de Janvier
		fin.setMinimalDaysInFirstWeek(4);
		// fin.setTimeZone(TimeZone.getTimeZone("Europe/Paris"));
		fin.set(Calendar.YEAR, annee);
		fin.set(Calendar.MONTH, mois - 1); // ******LUDO
		fin.set(Calendar.DAY_OF_MONTH, jour);
		fin.set(Calendar.HOUR_OF_DAY, heure);
		fin.set(Calendar.MINUTE, min);
		fin.set(Calendar.SECOND, 0);
		fin.set(Calendar.MILLISECOND, 0);
		fin.setTime(fin.getTime());

		// *****LUDO
		if (fin.getTimeInMillis() <= debut.getTimeInMillis()) {
			erreurEnregistrement = "Dates incoherentes";
			return false;
		}
		else {
			return true;
		}

	}

	public String fond() {
		return "background:url(" + ((Application) application()).srcfondULR() + ") ; background-position: -120px -100px;";
	}

	public String dateDebut() {
		return dateDebut;
	}

	public void setDateDebut(final String newDateDebut) {
		dateDebut = newDateDebut;
	}

	public String dateFin() {
		return dateFin;
	}

	public void setDateFin(final String newDateFin) {
		dateFin = newDateFin;
	}

	public String commentaire() {
		return commentaire;
	}

	public void setCommentaire(final String newCommentaire) {
		commentaire = newCommentaire;
	}

	private int getHeure(final String str) {
		return getElement(str, ":", 0);
	}

	private int getMinute(final String str) {
		return getElement(str, ":", 1);
	}

	private int getJour(final String str) {
		return getElement(str, "/", 0);
	}

	private int getMois(final String str) {
		return getElement(str, "/", 1);
	}

	private int getAnnee(final String str) {
		return getElement(str, "/", 2);
	}

	private int getElement(final String str, final String separateur, final int position) {
		if (str == null) {
			return 0;
		}
		final String[] array = str.split(separateur);
		if (array.length < position + 1) {
			return 0;
		}
		try {
			return Integer.parseInt(array[position]);
		}
		catch (final Throwable e) {
			LRLog.trace("PB : " + e.getMessage() + "\n" + e.getStackTrace());
			return -1;
		}
	}

	public LRUserInfo localUser() {
		final LRUserInfoDB user = new LRUserInfoDB(criApp.dataBus());
		user.individuForNoIndividu((Number) ((NSArray) session().objectForKey(AffichePlanning.LISTE_OBJET)).lastObject(), true);
		return user;
	}

}
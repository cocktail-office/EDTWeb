package org.cocktail.edtweb.server.components;
// Generated by the WOLips Core at Fri Jul 23 10:59:37 CEST 2004
import org.cocktail.edtweb.server.Session;
import org.cocktail.edtweb.server.metier.Adresse;
import org.cocktail.edtweb.server.metier.PersonneTelephone;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WOResponse;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOEnterpriseObject;
import com.webobjects.eocontrol.EOGenericRecord;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSData;

import fr.univlr.cri.webapp.CRIWebComponent;
import fr.univlr.cri.webapp.LRUserInfo;
import fr.univlr.cri.webapp.LRUserInfoDB;

public class EDTIndividuInfoPublic extends CRIWebComponent {
	/**
	 * 
	 */
	private static final long serialVersionUID = 8773197702587953959L;
	private Adresse localUser;
	private Number oldUserNoIndividu;
	private NSData oldPhoto;
	public boolean showphoto = false;
	public String userFonction;
	public LRUserInfo leUserInfo;

	public EDTIndividuInfoPublic(final WOContext context) {
		super(context);

	}

	private EOEditingContext localEContext() {
		return session().defaultEditingContext();
	}

	public NSData photoIndividu() {
		if (!usePhoto()) {
			return null;
		}
		if (oldUserNoIndividu != null && oldUserNoIndividu == noIndividu()) {
			return oldPhoto;
		}
		if (user() == null || user().noIndividu() == null) {
			return null;
		}
		final EOQualifier arg = EOQualifier.qualifierWithQualifierFormat("noIndividu = %@", new NSArray(user().noIndividu()));
		EOGenericRecord photo = null;
		final LRUserInfo leUser = new LRUserInfoDB(criApp.dataBus());
		leUser.compteForLogin((String) session().objectForKey(EDTIndividuPublic.LOGIN_EXTERNE), null, true);

		if (leUser.userStatus() == LRUserInfo.STATUS_ETUDIANT) {
			photo = (EOGenericRecord) criApp.dataBus().fetchArray(localEContext(), "PhotosEtudiants", arg, null, false).lastObject();
		}
		else {
			photo = (EOGenericRecord) criApp.dataBus().fetchArray(localEContext(), "PhotosEmployes", arg, null, false).lastObject();
		}
		if (photo == null) {
			return null;
		}
		oldPhoto = (NSData) (photo).valueForKey("datasPhoto");
		oldUserNoIndividu = noIndividu();
		return (NSData) (photo).valueForKey("datasPhoto");
	}

	public Adresse user() {
		if ((localUser == null && noIndividu() != null) || ((Number) localUser.valueForKey("noIndividu")).intValue() != noIndividu().intValue()) {
			final EOQualifier arg = EOQualifier.qualifierWithQualifierFormat("noIndividu = %@", new NSArray(noIndividu()));
			localUser = (Adresse) criApp.dataBus().fetchObject(localEContext(), "Adresse", arg);
			if (localUser.adrQualite() != null) {
				userFonction = localUser.adrQualite().toUpperCase();
			}
		}
		return localUser;
	}

	public void appendToResponse(final WOResponse arg0, final WOContext arg1) {
		user();
		super.appendToResponse(arg0, arg1);
	}

	private boolean usePhoto() {
		// test pour savoir si on peut utiliser les photos.....(BLOBS)
		final EOQualifier qualifier = EOQualifier.qualifierWithQualifierFormat("paramKey = %@", new NSArray("GRHUM_PHOTO"));
		final EOEnterpriseObject parametre = (EOEnterpriseObject) criApp.dataBus().fetchArray("ul_GrhumParametres", qualifier, null).lastObject();
		if (parametre == null) {
			return false;
		}
		return "OUI".equals(parametre.valueForKey("paramValue"));
	}

	private Number noIndividu() {
		if (session().objectForKey(EDTIndividuChoisi.INDIVIDU_CHOISI) != null
				&& session().objectForKey(EDTIndividuChoisi.INDIVIDU_CHOISI) != NullValue) {
			return ((LRUserInfo) session().objectForKey(EDTIndividuChoisi.INDIVIDU_CHOISI)).noIndividu();
		}
		if (((Session) session()).getAffichageEnCours() == Main.AFFICHE_INDIVIDU_PUBLIC) {// ajouter
			leUserInfo = new LRUserInfoDB(criApp.dataBus());
			leUserInfo.compteForLogin((String) session().objectForKey(EDTIndividuPublic.LOGIN_EXTERNE), null, true);
			return leUserInfo.noIndividu();
		}
		return criSession().connectedUserInfo().noIndividu();
	}

	public String email() {
		if (leUserInfo != null) {
			return leUserInfo.email();
		}
		else {
			return "";
		}
	}

	public WOComponent voirPhoto() {
		if (photoIndividu() != null) {
			session().setObjectForKey(new Boolean(true), "showphoto");
			session().setObjectForKey(photoIndividu(), "photo");
		}
		else {
			session().setObjectForKey(new Boolean(false), "showphoto");
			// session().setObjectForKey((NSData)photoIndividu(),"photo");
		}

		return null;
	}

	public String mailto() {
		return "mailto:" + email();
	}

	public String telephone() {
		if (user() == null) {
			return "";
		}
		final NSArray phones = user().toPersonneTelephone();
		for (int i = 0; i < phones.count(); i++) {
			final PersonneTelephone unPhone = (PersonneTelephone) phones.objectAtIndex(i);
			if ((unPhone.typeNo().equals("TEL")) && (unPhone.typeTel().equals("PRF"))) {
				return unPhone.noTelephone();
			}
		}
		return "";
	}

	public String mobile() {
		if (user() == null) {
			return "";
		}
		final NSArray phones = user().toPersonneTelephone();
		for (int i = 0; i < phones.count(); i++) {
			final PersonneTelephone unPhone = (PersonneTelephone) phones.objectAtIndex(i);
			if ((unPhone.typeNo().equals("MOB")) && (unPhone.typeTel().equals("PRF"))) {
				return unPhone.noTelephone();
			}
		}
		return "";
	}

}
package org.cocktail.edtweb.server.components;
// Generated by the WOLips Core at Mon Aug 23 14:32:28 CEST 2004

import org.cocktail.edtweb.server.metier.GarnucheParametres;
import org.cocktail.edtweb.server.metier.ScolFormationAnnee;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.eocontrol.EOAndQualifier;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOEnterpriseObject;
import com.webobjects.eocontrol.EOGenericRecord;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.eocontrol.EOSortOrdering;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSMutableArray;

import fr.univlr.cri.webapp.CRIWebComponent;

public class EDTExamenMenu extends CRIWebComponent {
	private static final long serialVersionUID = -5863940946082052130L;
	public static final String GRADE = "Par Grades";
	public static final String DOMAINE = "Par Domaines";
	public static final String FILIERE = "Par Filières";
	public static final String DEPARTEMENT = "Par Départements";

	public static final String GRADE_SELECTIONNE = "gradeSelectionne";
	public static final String DOMAINE_SELECTIONNE = "domaineSelectionne";

	public static final String SHOW_DIPLOME = "showDiplome";
	public static final String SHOW_PLANNING = "showPlanningExam";
	public NSMutableArray listeDomGrde;
	public String aDomGrde;
	public String choixDomGrde;
	public NSMutableArray listeDommaine;
	public NSMutableArray listeGrade;

	/** @TypeInfo ScolFormationDomaine */
	public EOEnterpriseObject aDomaine;

	/** @TypeInfo ScolFormationGrade */
	public EOEnterpriseObject aGrade;

	public EDTExamenMenu(final WOContext context) {
		super(context);
		initListeDomGrde();
	}

	private EOEditingContext localEContext() {
		return session().defaultEditingContext();
	}

	private void initListeDomGrde() {
		listeDomGrde = new NSMutableArray();
		listeDomGrde.addObject(DOMAINE);
		listeDomGrde.addObject(DEPARTEMENT);
		listeDomGrde.addObject(GRADE);
		listeDomGrde.addObject(FILIERE);
		choixDomGrde = GRADE;
		choixDuDomGrd();
	}

	private boolean anneeCivile() {
		GarnucheParametres eo = GarnucheParametres
				.fetchGarnucheParametres(localEContext(), GarnucheParametres.PARAM_KEY_KEY, "GARNUCHE_ANNEE_CIVILE");
		return (eo != null && eo.paramValue() != null && eo.paramValue().equalsIgnoreCase("OUI"));
	}

	public Integer getAnneeScolEnCours() {
		if (criApp.config().intForKey("ANNEE_EN_COURS") == -1) {
			ScolFormationAnnee rec = ScolFormationAnnee.fetchScolFormationAnnee(localEContext(), ScolFormationAnnee.FANN_COURANTE_KEY, "O");
			if (rec == null || rec.fannDebut() == null) {
				return null;
			}
			return rec.fannDebut();
		}
		else {
			return new Integer(criApp.config().intForKey("ANNEE_EN_COURS"));
		}
	}

	private void initListeDommaine() {
		listeDommaine = new NSMutableArray();
		final NSMutableArray args = new NSMutableArray();
		args.addObject(EOQualifier.qualifierWithQualifierFormat("fdomValidite = %@", new NSArray("O")));
		args.addObject(EOQualifier.qualifierWithQualifierFormat(
				"scolFormationDiplomes.scolFormationSpecialisations.scolFormationHabilitations.fhabOuvert = %@", new NSArray("O")));
		args.addObject(EOQualifier.qualifierWithQualifierFormat(
				"scolFormationDiplomes.scolFormationSpecialisations.scolFormationHabilitations.fannKey = %@", new NSArray(getAnneeScolEnCours())));
		final NSMutableArray sort = new NSMutableArray();
		sort.addObject(EOSortOrdering.sortOrderingWithKey("fdomLibelle", EOSortOrdering.CompareAscending));
		if (choixDomGrde == DOMAINE) {
			insertIntoIfNotIn(listeDommaine, criApp.dataBus().fetchArray(localEContext(), "ScolFormationDomaine", new EOAndQualifier(args), sort),
					new NSArray("fdomCode"));
		}
		else {
			insertIntoIfNotIn(listeDommaine,
					criApp.dataBus().fetchArray(localEContext(), "ScolFormationDepartement", new EOAndQualifier(args), sort), new NSArray("fdomCode"));
		}
		EOSortOrdering.sortArrayUsingKeyOrderArray(listeDommaine, sort);
	}

	public static void insertIntoIfNotIn(final NSMutableArray liste, final NSArray array, final NSArray keys) {
		for (int i = 0; i < array.count(); i++) {
			final EOGenericRecord array_element = (EOGenericRecord) array.objectAtIndex(i);
			boolean find = false;
			for (int j = 0; j < liste.count(); j++) {
				final EOGenericRecord array_element2 = (EOGenericRecord) liste.objectAtIndex(j);
				boolean equals = true;
				// LRLog.trace("array_element.attributeKeys = "+array_element.attributeKeys());
				for (int k = 0; k < keys.count(); k++) {
					final String key = (String) keys.objectAtIndex(k);
					equals = equals && (array_element.valueForKey(key) == array_element2.valueForKey(key));
					// LRLog.trace(array_element.valueForKey(key)+" == "+array_element2.valueForKey(key)+" --> "+equals);
				}
				if (equals) {
					find = true;
				}
			}
			// LRLog.trace("########### find = "+find);
			if (!find) {
				liste.addObject(array_element);
			}
		}
	}

	private void initListeGrade() {
		listeGrade = new NSMutableArray();
		final NSMutableArray args = new NSMutableArray();
		args.addObject(EOQualifier.qualifierWithQualifierFormat("fgraValidite = %@", new NSArray("O")));
		args.addObject(EOQualifier.qualifierWithQualifierFormat(
				"scolFormationDiplomes.scolFormationSpecialisations.scolFormationHabilitations.fhabOuvert = %@", new NSArray("O")));
		args.addObject(EOQualifier.qualifierWithQualifierFormat(
				"scolFormationDiplomes.scolFormationSpecialisations.scolFormationHabilitations.fannKey = %@", new NSArray(getAnneeScolEnCours())));
		final NSMutableArray sort = new NSMutableArray();
		sort.addObject(EOSortOrdering.sortOrderingWithKey("fgraCodage", EOSortOrdering.CompareAscending));
		if (choixDomGrde == GRADE) {
			insertIntoIfNotIn(listeGrade, criApp.dataBus().fetchArray(localEContext(), "ScolFormationGrade", new EOAndQualifier(args), sort),
					new NSArray("fgraCode"));
		}
		else {
			insertIntoIfNotIn(listeGrade, criApp.dataBus().fetchArray(localEContext(), "ScolFormationFiliere", new EOAndQualifier(args), sort),
					new NSArray("fgraCode"));
		}
		EOSortOrdering.sortArrayUsingKeyOrderArray(listeGrade, sort);
	}

	public WOComponent choixDuDomGrd() {
		session().setObjectForKey(Boolean.FALSE, SHOW_DIPLOME);
		session().setObjectForKey(NullValue, DOMAINE_SELECTIONNE);
		session().setObjectForKey(NullValue, GRADE_SELECTIONNE);
		if (choixDomGrde == DOMAINE || choixDomGrde == DEPARTEMENT) {
			initListeDommaine();
		}
		else {
			initListeGrade();
		}
		return null;
	}

	public boolean showGrade() {
		return choixDomGrde == GRADE || choixDomGrde == FILIERE;
	}

	public WOComponent selectionGrade() {
		session().setObjectForKey(Boolean.TRUE, SHOW_DIPLOME);
		session().setObjectForKey(Boolean.FALSE, SHOW_PLANNING);
		session().setObjectForKey(NullValue, DOMAINE_SELECTIONNE);
		session().setObjectForKey(aGrade, GRADE_SELECTIONNE);
		session().setObjectForKey(new Boolean(true), "refresh");
		return null;
	}

	public WOComponent selectionDomaine() {
		session().setObjectForKey(Boolean.TRUE, SHOW_DIPLOME);
		session().setObjectForKey(Boolean.FALSE, SHOW_PLANNING);
		session().setObjectForKey(NullValue, GRADE_SELECTIONNE);
		session().setObjectForKey(aDomaine, DOMAINE_SELECTIONNE);
		session().setObjectForKey(new Boolean(true), "refresh");
		return null;
	}

	public String classItemMenuSelected() {
		if (showGrade()) {
			if (aGrade.equals(session().objectForKey(GRADE_SELECTIONNE))) {
				return "menuItemSelected";
			}
			else {
				return "menuItem";
			}
		}
		else {
			if (aDomaine.equals(session().objectForKey(DOMAINE_SELECTIONNE))) {
				return "menuItemSelected";
			}
			else {
				return "menuItem";
			}
		}
	}

	public String iconItemMenuSelected() {
		if (showGrade()) {
			if (aGrade.equals(session().objectForKey(GRADE_SELECTIONNE))) {
				return "mitem-open.gif";
			}
			else {
				return "mitem-close.gif";
			}
		}
		else {
			if (aDomaine.equals(session().objectForKey(DOMAINE_SELECTIONNE))) {
				return "mitem-open.gif";
			}
			else {
				return "mitem-close.gif";
			}
		}
	}

	public String libelleItem() {
		if (showGrade()) {
			if (aGrade.classDescription().entityName().equals("ScolFormationGrade")) {
				String s = (String) aGrade.valueForKey("fgraLibelle");
				if (s == null || s.trim().length() > 15) {
					s = (String) aGrade.valueForKey("fgraCode");
				}
				return s;
			}
			else {
				return (String) aGrade.valueForKey("fgraAbreviation");
			}
		}
		else {
			if (aDomaine.classDescription().entityName().equals("ScolFormationDomaine")) {
				return (String) aDomaine.valueForKey("fdomLibelle");
			}
			else {
				return (String) aDomaine.valueForKey("fdomAbreviation");
			}
		}
	}
}
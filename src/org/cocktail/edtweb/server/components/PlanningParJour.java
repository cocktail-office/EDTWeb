package org.cocktail.edtweb.server.components;
// Generated by the WOLips TemplateEngine Plug-in at 1 fÈvr. 2005 12:02:08

import java.util.Calendar;
import java.util.GregorianCalendar;

import org.cocktail.edtweb.server.AffichePlanningResponder;
import org.cocktail.edtweb.server.Application;
import org.cocktail.edtweb.server.EDTObject;
import org.cocktail.edtweb.server.Jour;
import org.cocktail.edtweb.server.Session;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WOResponse;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSMutableDictionary;
import com.webobjects.foundation.NSTimestamp;

public class PlanningParJour extends WOComponent {
	/**
	 * 
	 */
	private static final long serialVersionUID = 9003140126536368647L;
	public static String HEURE_DEB = "heureDebut";
	public static String HEURE_FIN = "heureFin";
	public static String JOUR = "jourChoisi";
	public static final String BND_SIMPLE_CONSULTATION = "enConsultation";
	public int index;
	// public EDTObject itemObjet;
	public String heureDeb;
	public String heurefinStr;
	public boolean voirAjouterResa;
	public AffichePlanningResponder responder;
	protected boolean voirAjouterResa2;

	/** @TypeInfo java.lang.String */
	protected NSMutableArray hdl;

	/** @TypeInfo java.lang.String */
	protected NSMutableArray hfl;

	/** @TypeInfo java.lang.String */
	protected NSMutableArray mdl;

	/** @TypeInfo java.lang.String */
	protected NSMutableArray mfl;
	protected boolean erreur;
	protected String heureD;
	protected String heureF;
	protected String minuteD;
	protected String minuteF;

	public PlanningParJour(final WOContext context) {
		super(context);
		hdl = initCombo(1, 23);
		hfl = initCombo(1, 23);
		mdl = initCombo(0, 59);
		mfl = initCombo(0, 59);
		erreur = false;
		responder = (AffichePlanningResponder) session().objectForKey(AffichePlanning.RESPONDER);
	}

	// ******LUDO******
	public NSMutableArray initCombo(final int deb, final int fin) {
		int i;
		Integer j;
		String str;
		NSMutableArray tab;

		tab = new NSMutableArray(fin - deb + 1);
		for (i = deb; i < fin + 1; i++) {
			j = new Integer(i);
			if (i < 10) {
				str = new String("0");
			}
			else {
				str = new String("");
			}
			str = new String(str + j.toString());
			tab.addObject(str);
		}
		return tab;
	}

	public void appendToResponse(final WOResponse arg0, final WOContext arg1) {
		session().setObjectForKey(new Boolean(false), "refreshComposant");
		listeObjet();
		super.appendToResponse(arg0, arg1);
	}

	/**
	 * binding typeObjet
	 * 
	 * @return le type d'objet a afficher les disponibilitÈes
	 */
	public String typeObjet() {
		return (String) session().objectForKey(AffichePlanning.TYPE_OBJET);
	}

	public void setTypeObjet(final String s) {
		session().setObjectForKey(s, AffichePlanning.TYPE_OBJET);
	}

	public NSArray listeObjet() {
		final Jour jour = new Jour(nsJour());
		if (responder == null) {
			return new NSArray();
		}
		return responder.getListeResaObjet(jour.debutDeJournnee(), jour.finDeJournnee());
	}

	public String rowspan() {
		return "14400";
	}

	public boolean afficheTd() {
		return index == 0;
	}

	// public NSMutableArray listeObjet() {
	// return listeObjet;
	// }
	public String height() {
		if (itemObjet() == null) {
			return null;
		}
		final int top = getTop(itemObjet());
		if (top >= 0) {
			return Integer.toString(getHeight(itemObjet()) - 1) + "px";
		}
		return null;
	}

	public String top() {
		if (itemObjet() == null) {
			return null;
		}
		final int top = getTop(itemObjet());
		if (top >= 0) {
			if (((Session) session()).getAffichageEnCours() == Main.AFFICHE_INDIVIDU_PUBLIC) {
				return Integer.toString(top + 181) + "px";
			}
			if (((Session) session()).getAffichageEnCours() == Main.AFFICHE_INDIVIDU) {
				if (!((Boolean) (session().objectForKey("showphoto"))).booleanValue()) {
					return Integer.toString(top + 183 + 44) + "px";
				}
				else {
					return Integer.toString(top + 183 + 44) + "px";
				}
			}
			else {
				return Integer.toString(top + 181) + "px";
			}
		}

		return null;
	}

	public int getHeureDebut() {
		if (session().objectForKey(HEURE_DEB) == null) {
			session().setObjectForKey("8", HEURE_DEB);
		}
		int deb = (new Integer((String) session().objectForKey(HEURE_DEB))).intValue();
		if (deb <= 0) {
			deb = 0;
			session().setObjectForKey("0", HEURE_DEB);
		}
		if (deb >= getHeureFin()) {
			deb = getHeureFin() - 1;
			session().setObjectForKey("" + (getHeureFin() - 1), HEURE_DEB);
		}
		return deb;
	}

	public int getHeureFin() {
		if (session().objectForKey(HEURE_FIN) == null) {
			session().setObjectForKey("18", HEURE_FIN);
		}
		int fin = (new Integer((String) session().objectForKey(HEURE_FIN))).intValue();
		if (fin <= 1) {
			fin = 1;
			session().setObjectForKey("" + fin, HEURE_FIN);
		}
		if (fin >= 24) {
			fin = 24;
			session().setObjectForKey("24", HEURE_FIN);
		}
		return fin;
	}

	// public Jour getJour(){
	// if(session().objectForKey(JOUR)==null)
	// setJour(new Jour());
	// return ((Jour)session().objectForKey(JOUR));
	// }

	public NSTimestamp nsJour() {
		final NSTimestamp day = (NSTimestamp) ((NSTimestamp) session().objectForKey("dateDebut")).clone();
		return day;
	}

	public void setNsJour(final NSTimestamp j) {
		session().setObjectForKey(j, "dateDebut");

	}

	public int nbHeure() {
		return getHeureFin() - getHeureDebut();
	}

	public int affichageItem() {
		return getHeureDebut() + index;
	}

	public WOComponent nextDay() {
		setNsJour(nsJour().timestampByAddingGregorianUnits(0, 0, 1, 0, 0, 0));
		return null;
	}

	public WOComponent prevDay() {
		setNsJour(nsJour().timestampByAddingGregorianUnits(0, 0, -1, 0, 0, 0));
		session().setObjectForKey(new Boolean(true), "InitChoixDate");
		return null;
	}

	public NSTimestamp getJourPlusUn() {
		final NSTimestamp day = nsJour().timestampByAddingGregorianUnits(0, 0, 1, 0, 0, 0);
		session().setObjectForKey(new Boolean(true), "InitChoixDate");
		return day;
	}

	public NSTimestamp getJourPlusDeux() {
		final NSTimestamp day = nsJour().timestampByAddingGregorianUnits(0, 0, 2, 0, 0, 0);
		return day;
	}

	public NSTimestamp getJourMoinsUn() {
		final NSTimestamp day = nsJour().timestampByAddingGregorianUnits(0, 0, -1, 0, 0, 0);
		return day;
	}

	public NSTimestamp getJourMoinsDeux() {
		final NSTimestamp day = nsJour().timestampByAddingGregorianUnits(0, 0, -2, 0, 0, 0);
		return day;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.webobjects.appserver.WOComponent#synchronizesVariablesWithBindings()
	 */
	public boolean synchronizesVariablesWithBindings() {
		return false;
	}

	public int getNoSemaine() {
		final GregorianCalendar jour = new GregorianCalendar();
		jour.setFirstDayOfWeek(Calendar.MONDAY);
		jour.setMinimalDaysInFirstWeek(Calendar.THURSDAY);
		jour.setTimeInMillis(nsJour().getTime());
		return jour.get(Calendar.WEEK_OF_YEAR);
	}

	public int getAnnee() {
		final GregorianCalendar jour = new GregorianCalendar();
		jour.setFirstDayOfWeek(Calendar.MONDAY);
		jour.setMinimalDaysInFirstWeek(Calendar.THURSDAY);
		jour.setTimeInMillis(nsJour().getTime());
		return jour.get(Calendar.YEAR);
	}

	public WOComponent goJPlusUn() {
		setNsJour(getJourPlusUn());
		session().setObjectForKey(new Boolean(true), "InitChoixDate");
		return null;
	}

	public WOComponent goJPlusDeux() {
		setNsJour(getJourPlusDeux());
		session().setObjectForKey(new Boolean(true), "InitChoixDate");
		return null;
	}

	public WOComponent goJMoinsUn() {
		setNsJour(getJourMoinsUn());
		session().setObjectForKey(new Boolean(true), "InitChoixDate");
		return null;
	}

	public WOComponent goJMoinsDeux() {
		setNsJour(getJourMoinsDeux());
		session().setObjectForKey(new Boolean(true), "InitChoixDate");
		return null;
	}

	public boolean simpleConsultation() {
		if (session().objectForKey(BND_SIMPLE_CONSULTATION) == null) {
			return false;
		}
		return ((Boolean) session().objectForKey(BND_SIMPLE_CONSULTATION)).booleanValue();
	}

	// onMouseOver="javascript: setOffset(86); document.onmousemove = get_mouse; document.onclick = change_textfield;"
	// onMouseOut="javascript:
	// document.onmousemove = null; document.onclick = null;" STYLE="cursor:crosshair"

	public WOComponent goAjouterResa() {
		voirAjouterResa = true;
		return null;
	}

	public WOComponent ValiderResa() {
		voirAjouterResa = false;
		session().setObjectForKey(new Boolean(true), "refreshComposant");
		int heureDeb = 8;
		int minDeb = 0;
		if (this.heureDeb.indexOf(":") > 0) {
			heureDeb = Integer.parseInt(this.heureDeb.split(":")[0]);
			minDeb = Integer.parseInt(this.heureDeb.split(":")[1]);
		}

		int heureFin = 8;
		int minFin = 0;
		if (this.heurefinStr.indexOf(":") > 0) {
			heureFin = Integer.parseInt(this.heurefinStr.split(":")[0]);
			minFin = Integer.parseInt(this.heurefinStr.split(":")[1]);
		}
		final Jour jDeb = new Jour(nsJour().timestampByAddingGregorianUnits(0, 0, 0, heureDeb, minDeb, 0));
		final Jour jfin = new Jour(nsJour().timestampByAddingGregorianUnits(0, 0, 0, heureFin, minFin, 0));
		session().setObjectForKey(jDeb, AffichePlanning.JOUR_DEBUT);
		session().setObjectForKey(jfin, AffichePlanning.JOUR_FIN);
		this.heureDeb = null; // **ludo
		heurefinStr = null; // **ludo
		session().setObjectForKey(new Boolean(false), "testludo");
		return responder.goReservation();
		// return null;
	}

	public int getTop(final EDTObject ob) {
		final GregorianCalendar debut = (GregorianCalendar) ob.dateDebutGC().clone();
		final GregorianCalendar fin = (GregorianCalendar) ob.dateFinGC().clone();

		final Jour aDay = new Jour(nsJour());
		if (debut.after(nsJour()) || fin.before(nsJour())) {
			return -1;
		}
		if (debut.get(Calendar.DAY_OF_YEAR) < aDay.get(Calendar.DAY_OF_YEAR) && fin.get(Calendar.DAY_OF_YEAR) >= aDay.get(Calendar.DAY_OF_YEAR)) {
			debut.set(Calendar.HOUR_OF_DAY, getHeureDebut());
			debut.set(Calendar.MINUTE, 0);
		}
		if (fin.get(Calendar.DAY_OF_YEAR) > aDay.get(Calendar.DAY_OF_YEAR) && debut.get(Calendar.DAY_OF_YEAR) <= aDay.get(Calendar.DAY_OF_YEAR)) {
			fin.set(Calendar.HOUR_OF_DAY, (getHeureFin() == 24 ? 23 : getHeureFin()));
			fin.set(Calendar.MINUTE, (getHeureFin() == 24 ? 59 : 0));
		}
		int top = 0;

		top = ((debut.get(Calendar.HOUR_OF_DAY) - getHeureDebut()) * 61) + debut.get(Calendar.MINUTE); // modifier 10/11/05
		return top;
	}

	public int getHeight(final EDTObject ob) {
		final GregorianCalendar debut = (GregorianCalendar) ob.dateDebutGC().clone();
		final GregorianCalendar fin = (GregorianCalendar) ob.dateFinGC().clone();
		final Jour aDay = new Jour(nsJour());
		if (debut.after(nsJour()) || fin.before(nsJour())) {
			return -1;
		}
		if (debut.get(Calendar.DAY_OF_YEAR) < aDay.get(Calendar.DAY_OF_YEAR) && fin.get(Calendar.DAY_OF_YEAR) >= aDay.get(Calendar.DAY_OF_YEAR)) {
			debut.set(Calendar.HOUR_OF_DAY, getHeureDebut());
			debut.set(Calendar.MINUTE, 0);
		}
		if (fin.get(Calendar.DAY_OF_YEAR) > aDay.get(Calendar.DAY_OF_YEAR) && debut.get(Calendar.DAY_OF_YEAR) <= aDay.get(Calendar.DAY_OF_YEAR)) {
			fin.set(Calendar.HOUR_OF_DAY, (getHeureFin() == 24 ? 23 : getHeureFin()));
			fin.set(Calendar.MINUTE, (getHeureFin() == 24 ? 59 : 0));
		}
		int height = 0;
		height = ((fin.get(Calendar.HOUR_OF_DAY) - debut.get(Calendar.HOUR_OF_DAY)) * 61) + (fin.get(Calendar.MINUTE) - debut.get(Calendar.MINUTE));
		return height;
	}

	public boolean afficherObjet() {
		if (itemObjet() == null) {
			return false;
		}
		if (getTop(itemObjet()) < 0) {
			return false;
		}
		final Jour debut = new Jour(itemObjet().dateDebutGC());
		final Jour fin = new Jour(itemObjet().dateFinGC());
		final Jour day = new Jour(nsJour());
		day.set(Calendar.HOUR_OF_DAY, getHeureDebut());
		day.setTimeInMillis(day.getTimeInMillis());
		if (fin.before(day)) {
			return false;
		}
		day.set(Calendar.HOUR_OF_DAY, getHeureFin());
		day.setTimeInMillis(day.getTimeInMillis());
		if (debut.after(day)) {
			return false;
		}
		return true;
	}

	public EDTObject itemObjet() {
		return (EDTObject) (session().objectForKey(EDTIndividu.OBJET_RESA));
	}

	public void setItemObjet(final EDTObject obj) {
		if (obj != null) {
			session().setObjectForKey(obj, EDTIndividu.OBJET_RESA);
		}
	}

	public String affichgeContenu() {
		final String str = "<TABLE border=\"0\" height=\"100%\" width=\"100%\"><TR><TD valign=\"center\" align=\"center\">"
				+ responder.motifReservation(250) + "</TD></TR></TABLE>";
		return str;
	}

	public String srcImageJour() {
		return ((Application) application()).urlImage("parJour_selected.gif", context());
	}

	public String onMouseOverJour() {
		return "javascript:document.getElementById('img_jour').src='" + ((Application) application()).urlImage("parJour_over.gif", context()) + "';";
	}

	public String onMouseOutJour() {
		return "javascript:document.getElementById('img_jour').src='" + ((Application) application()).urlImage("parJour_selected.gif", context())
				+ "';";
	}

	public String srcImageSemaine() {
		return ((Application) application()).urlImage("parSemaine.gif", context());
	}

	public String onMouseOverSemaine() {
		return "javascript:document.getElementById('img_semaine').src='" + ((Application) application()).urlImage("parSemaine_over.gif", context())
				+ "';";
	}

	public String onMouseOutSemaine() {
		return "javascript:document.getElementById('img_semaine').src='" + ((Application) application()).urlImage("parSemaine.gif", context()) + "';";
	}

	// ***LUDO
	// ****LUDO
	public WOComponent goCarnet() {
		voirAjouterResa = false;
		voirAjouterResa2 = false;
		session().setObjectForKey("Carnet", EDTIndividu.TYPE_PLANNING);
		return null;
	}

	// ***Ludo
	public String voirInfo() {
		final String resaOrdre = Integer.toString(itemObjet().key().intValue());
		if (((Session) session()).getObjetResa().objectForKey(resaOrdre) == null) {
			((Session) session()).getObjetResa().setObjectForKey(itemObjet(), resaOrdre);
		}
		final NSMutableDictionary dico = new NSMutableDictionary();
		dico.setObjectForKey(resaOrdre, "objet");
		final String url = context().directActionURLForActionNamed("infoForResa", dico);
		final String info = "javascript: messageWindow('" + url + "','Informations','300','300');";
		return info;
	}

	public WOComponent goAjouterResa2() {
		voirAjouterResa2 = true;
		return null;
	}

	public boolean voirAjouterResa2() {
		return voirAjouterResa2;
	}

	public void setVoirAjouterResa2(final boolean newVoirAjouterResa2) {
		voirAjouterResa2 = newVoirAjouterResa2;
	}

	public WOComponent annuler() {
		voirAjouterResa = false;
		voirAjouterResa2 = false;
		erreur = false;
		return null;
	}

	public WOComponent validerResa2() {
		final Integer heuDebut = new Integer(heureD);
		final Integer minDebut = new Integer(minuteD);
		final Integer heuFin = new Integer(heureF);
		final Integer minFin = new Integer(minuteF);

		final Jour jDeb = new Jour(nsJour().timestampByAddingGregorianUnits(0, 0, 0, heuDebut.intValue(), minDebut.intValue(), 0));
		final Jour jfin = new Jour(nsJour().timestampByAddingGregorianUnits(0, 0, 0, heuFin.intValue(), minFin.intValue(), 0));
		if (jDeb.getTimeInMillis() > jfin.getTimeInMillis()) {
			erreur = true;
			return null;
		}
		session().setObjectForKey(jDeb, AffichePlanning.JOUR_DEBUT);
		session().setObjectForKey(jfin, AffichePlanning.JOUR_FIN);
		session().setObjectForKey(new Boolean(true), "testludo");
		erreur = false;
		voirAjouterResa2 = false;
		return responder.goReservation();
	}

	/** @TypeInfo java.lang.String */
	public NSMutableArray hdl() {
		return hdl;
	}

	public void setHdl(final NSMutableArray newHdl) {
		hdl = newHdl;
	}

	/** @TypeInfo java.lang.String */
	public NSMutableArray hfl() {
		return hfl;
	}

	public void setHfl(final NSMutableArray newHfl) {
		hfl = newHfl;
	}

	/** @TypeInfo java.lang.String */
	public NSMutableArray mdl() {
		return mdl;
	}

	public void setMdl(final NSMutableArray newMdl) {
		mdl = newMdl;
	}

	/** @TypeInfo java.lang.String */
	public NSMutableArray mfl() {
		return mfl;
	}

	public void setMfl(final NSMutableArray newMfl) {
		mfl = newMfl;
	}

	public boolean erreur() {
		return erreur;
	}

	public void setErreur(final boolean newErreur) {
		erreur = newErreur;
	}

	public String heureD() {
		return heureD;
	}

	public void setHeureD(final String newHeureD) {
		heureD = newHeureD;
	}

	public String heureF() {
		return heureF;
	}

	public void setHeureF(final String newHeureF) {
		heureF = newHeureF;
	}

	public String minuteD() {
		return minuteD;
	}

	public void setMinuteD(final String newMinuteD) {
		minuteD = newMinuteD;
	}

	public String minuteF() {
		return minuteF;
	}

	public void setMinuteF(final String newMinuteF) {
		minuteF = newMinuteF;
	}

}
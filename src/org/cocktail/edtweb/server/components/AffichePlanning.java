package org.cocktail.edtweb.server.components;
// Generated by the WOLips Core at Wed May 26 11:38:34 CEST 2004

import java.util.Calendar;
import java.util.GregorianCalendar;

import org.cocktail.edtweb.server.AffichePlanningResponder;
import org.cocktail.edtweb.server.Application;
import org.cocktail.edtweb.server.Heure;
import org.cocktail.edtweb.server.Jour;
import org.cocktail.edtweb.server.Semaine;
import org.cocktail.edtweb.server.Session;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WOResponse;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSTimestamp;

import fr.univlr.cri.util.StringCtrl;
import fr.univlr.cri.webapp.CRIWebComponent;
import fr.univlr.cri.webapp.LRLog;

public class AffichePlanning extends CRIWebComponent {
	private static final long serialVersionUID = 2877559155200984707L;
	public static final String TYPE_OBJET = "typeObjet";
	public static final String LISTE_OBJET = "listeObjet";
	public static final String RESPONDER = "responder";
	public static final String JOUR_DEBUT = "jourDebut";
	public static final String JOUR_FIN = "jourFin";
	public static final String COULEUR_FOND = "#FFFFFF";
	public static final String BND_SIMPLE_CONSULTATION = "enConsultation";

	public AffichePlanningResponder responder;

	private Heure oldHeure;
	private String affichageHeure;
	// private String oldCouleur;
	private Semaine oldSemaine;

	public Semaine semaineSelected;
	public Jour aJour;
	protected String layers;
	public String heureDebut;
	public String heureFin;
	public NSTimestamp dateJour;
	public Jour dateDuJour;

	public Heure uneHeure;
	public int indexJour;
	public int indexHeure;
	public int nbJour;
	public int heureDepart, heureArrive;
	public int nbHeureAfficher;
	public String selectedJour;
	public String selectedHeure;
	private Jour jourDebut;
	private Jour jourFin;
	public String couleurSelection;

	private String nomForm;
	protected boolean selectionOk;
	// ///**********LUDO********/

	/** @TypeInfo java.lang.String *******LUDO */
	protected NSMutableArray jourSem;
	protected boolean choixGraph;
	public boolean addButtonResaGraphic;
	public static boolean selectPlanningParJour = false;
	public String aDayInWeek;

	/**
	 * 
	 * <code> 
	 <div id="Layer1" style="position:absolute; " +
	 "left:171px; " +
	 "top:134px; " +
	 "width:342px; " +
	 "height:217px; " +
	 "z-index:1; " +
	 "background-color: #00FFFF; " +
	 "layer-background-color: #00FFFF; " +
	 "border: 1px none #000000; " +
	 "filter:Alpha(opacity=10, style=0);">
	 </div>
	 </code>
	 * 
	 * <img src="file:///C|/Documents%20and%20Settings/mparadot/Mes%20documents/Mes%20images/test2.png" width="320" height="320"
	 * style="filter:Alpha(opacity=10, style=0);">
	 */

	public AffichePlanning(final WOContext context) {
		super(context);
		responder = (AffichePlanningResponder) session().objectForKey(RESPONDER);
		nomForm = "myForm";
		addButtonResaGraphic = true;
		setChoixGraph(false);

		// myInit();
	}

	public void myInit() {
		if (((Session) session()).getAffichageEnCours() == Main.AFFICHE_INDIVIDU_PUBLIC) {// ajouter
			setSelectionOk(true);
		}
		else {
			setSelectionOk(false);
		}
		oldHeure = null;
		oldSemaine = null;

		if (session().objectForKey("couleurSelection") != null) {
			couleurSelection = (String) session().objectForKey("couleurSelection");
		}
		else {
			couleurSelection = "#AAAAFF";
		}
		if (session().objectForKey("heureDebut") != null) {
			heureDepart = (new Integer((String) session().objectForKey("heureDebut"))).intValue();
		}
		else {
			heureDepart = ((Application) application()).heureDebutParDefaut();
		}
		if (session().objectForKey("heureFin") != null) {
			heureArrive = (new Integer((String) session().objectForKey("heureFin"))).intValue();
		}
		else {
			heureArrive = ((Application) application()).heureFinParDefaut();
		}
		if (nbJour != 7) {
			nbJour = 5;
		}

		if (session().objectForKey("heureFin") != null) {
			nbHeureAfficher = (new Integer((String) session().objectForKey("heureFin"))).intValue() - heureDepart;
		}
		else {
			nbHeureAfficher = ((Application) application()).heureFinParDefaut() - ((Application) application()).heureDebutParDefaut();
		}
		if (session().objectForKey("dateDebut") != null) {
			int milieuJour = 12;
			NSTimestamp day = (NSTimestamp) ((NSTimestamp) session().objectForKey("dateDebut")).clone();
			if (heureDepart != heureArrive) {
				milieuJour = (heureDepart + heureArrive) / 2;
			}
			day = day.timestampByAddingGregorianUnits(0, 0, 0, milieuJour, 0, 0);
			dateDuJour = new Jour(day);
		}
		else {
			dateDuJour = new Jour(new GregorianCalendar());
		}
		reInit();
	}

	/**
	 * binding typeObjet
	 * 
	 * @return le type d'objet a afficher les disponibilit√àes
	 */
	public String typeObjet() {
		return (String) session().objectForKey(TYPE_OBJET);
	}

	public void setTypeObjet(final String s) {
		session().setObjectForKey(s, TYPE_OBJET);
	}

	public NSMutableArray listeObjet() {
		return (NSMutableArray) session().objectForKey(LISTE_OBJET);
	}

	public void setListeObjet(final NSMutableArray s) {
		session().setObjectForKey(s, LISTE_OBJET);
	}

	public Jour jourDebut() {
		return jourDebut;
	}

	public void setJourDebut(final Jour j) {
		jourDebut = j;
	}

	public void setJourDebut(final NSTimestamp j) {
		jourDebut = new Jour(j);
	}

	public Jour jourFin() {
		return jourFin;
	}

	public void setJourFin(final Jour j) {
		jourFin = j;
	}

	public void setJourFin(final NSTimestamp j) {
		jourFin = new Jour(j);
	}

	public String nomForm() {
		return nomForm;
	}

	public void setNomForm(final String s) {
		nomForm = s;
	}

	public void reInit() {
		semaineSelected = new Semaine();

		semaineSelected.initSemaine(nbJour, dateDuJour, heureDepart, nbHeureAfficher);

		if (oldSemaine == null || !oldSemaine.getAllDays().isEqualToArray(semaineSelected.getAllDays())) {
			oldSemaine = semaineSelected;
			dateDuJour.initLesHeures(heureDepart, nbHeureAfficher);
			if (typeObjet() != null) {
				initPlanning(typeObjet());
				LRLog.trace("typeObjet=" + typeObjet());
				return;
			}
			if (listeObjet() != null) {
				initPlanning(listeObjet());
			}
			LRLog.trace("listeObjet=" + listeObjet());
		}
		responder.initListeResa(((Jour) semaineSelected.getAllDays().objectAtIndex(0)).debutDeJournnee(), ((Jour) semaineSelected.getAllDays()
				.lastObject()).finDeJournnee());

	}

	// private EOEditingContext localEContext(){
	// return session().defaultEditingContext();
	// }
	//
	public String layers() {
		return layers;
	}

	public void setLayers(String newLayers) {
		layers = newLayers;
	}

	public void initPlanning(String typeCode) {
		responder.initPlanning(typeCode);
	}

	public void initPlanning(NSMutableArray listeObjetCle) {
		responder.initPlanning(listeObjetCle);
	}

	public String nbObjet() {
		if (oldHeure == null || !oldHeure.debutGC().equals(uneHeure.debutGC()) || affichageHeure == null) {
			oldHeure = uneHeure;
			affichageHeure = nbObjetDispoForDayAndTime(uneHeure);
		}
		return affichageHeure;
	}

	public String nbObjetDispoForDayAndTime(Heure aDay) {
		return responder.nbObjetDispoForDayAndTime(aDay);
	}

	public String couleurTR() {
		if (jourDebut() != null && uneHeure.debutGC().equals(jourDebut())) {
			return couleurSelection;
		}
		if (jourFin() != null && uneHeure.finGC().equals(jourFin())) {
			return couleurSelection;
		}

		if (jourDebut() != null && jourFin() != null && uneHeure.debutGC().after(jourDebut()) && uneHeure.finGC().before(jourFin())) {
			return couleurSelection;
		}

		if (nbObjet() != null && !nbObjet().equals("")) {
			return responder.couleurTR();
		}
		return COULEUR_FOND;
	}

	public WOComponent next() {
		dateDuJour.add(Calendar.WEEK_OF_YEAR, 1);
		session().setObjectForKey(((Jour) dateDuJour).toNSTimestamp(), "dateDebut");
		session().setObjectForKey(new Boolean(true), "InitChoixDate");
		reInit();
		return null;
	}

	public WOComponent prev() {
		dateDuJour.add(Calendar.WEEK_OF_YEAR, -1);
		session().setObjectForKey(((Jour) dateDuJour).toNSTimestamp(), "dateDebut");
		session().setObjectForKey(new Boolean(true), "InitChoixDate");
		reInit();
		return null;
	}

	public int colspan() {
		return nbJour + 1;
	}

	public String onClick() {
		if (((Boolean) session().objectForKey("CHOIX_PAR_GRAPH")) != null) {
			setChoixGraph(((Boolean) session().objectForKey("CHOIX_PAR_GRAPH")).booleanValue());
		}
		if ("".equals(nbObjetDispoForDayAndTime(uneHeure)) && choixGraph()) { // *********LUDO********
			return "javascript:document." + nomForm() + ".jour.value = '" + indexJour + "';document." + nomForm() + ".heure.value = '" + indexHeure
					+ "';document." + nomForm() + ".submit();";

		}
		return "";
	}

	public WOComponent nextMonth() {
		dateDuJour.add(Calendar.MONTH, 1);
		session().setObjectForKey(dateDuJour.toNSTimestamp(), "dateDebut");
		session().setObjectForKey(new Boolean(true), "InitChoixDate");
		reInit();
		return null;
	}

	public WOComponent prevMonth() {
		dateDuJour.add(Calendar.MONTH, -1);
		session().setObjectForKey(dateDuJour.toNSTimestamp(), "dateDebut");
		session().setObjectForKey(new Boolean(true), "InitChoixDate");
		reInit();
		return null;
	}

	public WOComponent refresh() {

		final Jour tmp = (Jour) semaineSelected.getAllDays().objectAtIndex((new Integer(selectedJour)).intValue());
		final Heure tmp2 = (Heure) tmp.heuresDuJour().objectAtIndex((new Integer(selectedHeure)).intValue());
		if (jourDebut() == null) {
			setJourDebut(new Jour(tmp2.debutGC()));
		}
		else {
			if (jourDebut().after(tmp2.debutGC())) {
				setJourDebut(new Jour(tmp2.debutGC()));
			}
			else {
				setJourFin(new Jour(tmp2.finGC()));
			}
		}
		if (choixGraph) {
			if (jourDebut() != null) {
				session().setObjectForKey(jourDebut(), AffichePlanning.JOUR_DEBUT);
			}
			if (jourFin() != null) {
				session().setObjectForKey(jourFin(), AffichePlanning.JOUR_FIN);
			}
		}
		return null;
	}

	public String onMouseOut() {
		if (((Boolean) session().objectForKey("CHOIX_PAR_GRAPH")) != null) {
			setChoixGraph(((Boolean) session().objectForKey("CHOIX_PAR_GRAPH")).booleanValue());
		}

		if (choixGraph()) {
			return "this.style.backgroundColor='" + couleurTR() + "'";
		}
		if (couleurTR().equals(COULEUR_FOND)) {
			return "";
		}
		return "return nd();";
	}

	public String onMouseOver() {
		if (((Boolean) session().objectForKey("CHOIX_PAR_GRAPH")) != null) {
			setChoixGraph(((Boolean) session().objectForKey("CHOIX_PAR_GRAPH")).booleanValue());
		}
		if (choixGraph()) {
			return "this.style.backgroundColor='" + couleurSelection + "'";
		}
		if (couleurTR().equals(COULEUR_FOND)) {
			return "";
		}
		return myTitle();
	}

	public WOComponent resetSelection() {
		setJourDebut((Jour) null);
		setJourFin((Jour) null);
		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.webobjects.appserver.WOElement#appendToResponse(com.webobjects.appserver.WOResponse, com.webobjects.appserver.WOContext)
	 */
	public void appendToResponse(final WOResponse arg0, final WOContext arg1) {
		if (session().objectForKey("refreshPlanning") != null && ((Boolean) session().objectForKey("refreshPlanning")).booleanValue()) {
			myInit();
			session().setObjectForKey(new Boolean(false), "refreshPlanning");
			session().setObjectForKey((NSTimestamp) session().objectForKey("dateDebut"), "dateDebut");
			if (session().objectForKey("heureDebut") != null) {
				session().setObjectForKey((String) session().objectForKey("heureDebut"), "heureDebut");
			}
			if (session().objectForKey("heureFin") != null) {
				session().setObjectForKey((String) session().objectForKey("heureFin"), "heureFin");
			}

			super.appendToResponse(arg0, arg1);
		}
		else {

			if (session().objectForKey("refreshComposant") != null && ((Boolean) session().objectForKey("refreshComposant")).booleanValue()) {
				myInit();
				if ((session().objectForKey("voirGraphique") != null && !((Boolean) session().objectForKey("voirGraphique")).booleanValue())
						&& (session().objectForKey("CHOIX_PAR_GRAPH") != null && !((Boolean) session().objectForKey("CHOIX_PAR_GRAPH"))
								.booleanValue())) {
					setJourDebut((Jour) null);
					setJourFin((Jour) null);
				}
				if (session().objectForKey("voirGraphique") != null && ((Boolean) session().objectForKey("voirGraphique")).booleanValue()) {// ajouter
					setJourDebut((Jour) session().objectForKey(AffichePlanning.JOUR_DEBUT));
					setJourFin((Jour) session().objectForKey(AffichePlanning.JOUR_FIN));
					session().setObjectForKey(new Boolean(false), "voirGraphique");
					// pour passer la date
					if (session().objectForKey("dateDebut") != null) {
						session().setObjectForKey((NSTimestamp) session().objectForKey("dateDebut"), "dateDebut");
						dateDuJour = new Jour((NSTimestamp) session().objectForKey("dateDebut"));
					}
				}

			}

			if (session().objectForKey("reInitComposant") != null && ((Boolean) session().objectForKey("reInitComposant")).booleanValue()) {
				session().setObjectForKey(new Boolean(false), "reInitComposant");
				reInit();
			}

			super.appendToResponse(arg0, arg1);
		}
	}

	public boolean synchronizesVariablesWithBindings() {
		return false;
	}

	public WOComponent retourPlanning() {
		if (jourDebut() != null) {
			session().setObjectForKey(jourDebut().clone(), JOUR_DEBUT);
		}
		if (jourFin() != null) {
			session().setObjectForKey(jourFin().clone(), JOUR_FIN);
		}
		if (jourDebut() == null || jourFin() == null) {
			// TODO affiche erreur
			session().setObjectForKey(new Jour(), JOUR_DEBUT);
			session().setObjectForKey(new Jour(), JOUR_FIN);
			// return null;
		}
		setSelectionOk(false);
		session().setObjectForKey(new Boolean(false), "testludo"); // ****LUDO*****
		return responder.goReservation();
	}

	// public WOComponent voirInfo(){
	// nbObjetDispoForDayAndTime(uneHeure);
	// AffichageInfoReservation page = (AffichageInfoReservation)pageWithName("AffichageInfoReservation");
	// page.awake();
	// return page;
	// }

	public boolean selectionOk() {
		return selectionOk;
	}

	public void setSelectionOk(final boolean newSelectionOk) {
		selectionOk = newSelectionOk;
	}

	public WOComponent modeSelection() {
		setSelectionOk(true);
		setChoixGraph(true);
		return null;
	}

	public String imageDeveloppement() {
		if (nbJour == 5) {
			return ((Application) application()).urlImage("dev_droite_b.gif", context());
		}
		return ((Application) application()).urlImage("dev_gauche_b.gif", context());
	}

	public String onMouseOverImage() {
		if (nbJour == 5) {
			return "this.src='" + ((Application) application()).urlImage("dev_droite_g.gif", context()) + "'";
		}
		return "this.src='" + ((Application) application()).urlImage("dev_gauche_g.gif", context()) + "'";
	}

	public String onMouseOutImage() {
		if (nbJour == 5) {
			return "this.src='" + ((Application) application()).urlImage("dev_droite_b.gif", context()) + "'";
		}
		return "this.src='" + ((Application) application()).urlImage("dev_gauche_b.gif", context()) + "'";
	}

	public WOComponent modifTailleTableau() {
		if (nbJour == 5) {
			nbJour = 7;
		}
		else {
			nbJour = 5;
		}
		reInit();
		return null;
	}

	public String titleLienModifTailleTableau() {
		if (nbJour == 5) {
			return "Voir le weekend";
		}
		else {
			return "Cache le weekend";
		}
	}

	public boolean simpleConsultation() {
		if (hasBinding(BND_SIMPLE_CONSULTATION)) {
			return ((Boolean) valueForBinding(BND_SIMPLE_CONSULTATION)).booleanValue();
		}
		return false;
		// if (session().objectForKey(BND_SIMPLE_CONSULTATION) == null) {
		// return false;
		// }
		// return ((Boolean) session().objectForKey(BND_SIMPLE_CONSULTATION)).booleanValue();
	}

	public String myTitle() {
		if (responder.title1() == null) {
			return null;
		}
		if (responder.title2() == null) {
			return "return overlib('--Pas d'Objet--', CAPTION,'" + formatString(responder.title1()) + "');";
		}
		return "return overlib('" + formatString(responder.title2()) + "', CAPTION,'" + formatString(responder.title1()) + "');";
	}

	private String formatString(String str) {
		if (str == null) {
			return "";
		}
		// remplace les " par \"
		str = StringCtrl.replace(str, "\"", "&quot;");
		// remplace les ' par \'
		str = StringCtrl.replace(str, "'", "\\'");
		// remplace le retour chariot
		str = str.replaceAll("\n", "");
		str = StringCtrl.replace(str, "\r", "<BR>");
		return str;
	}

	public WOComponent goPlanningJour() {
		session().setObjectForKey("PlanningParJour", EDTIndividu.TYPE_PLANNING);
		selectPlanningParJour = true;
		if (aJour != null) {
			session().setObjectForKey(aJour.toNSTimestamp(), "dateDebut");
		}
		session().setObjectForKey(new Boolean(true), "InitChoixDate");
		return null;
	}

	public String srcImageJour() {
		return ((Application) application()).urlImage("parJour.gif", context());
	}

	public String onMouseOverJour() {
		return "javascript:document.getElementById('img_jour').src='" + ((Application) application()).urlImage("parJour_over.gif", context()) + "';";
	}

	public String onMouseOutJour() {
		return "javascript:document.getElementById('img_jour').src='" + ((Application) application()).urlImage("parJour.gif", context()) + "';";
	}

	public String srcImageSemaine() {
		return ((Application) application()).urlImage("parSemaine_selected.gif", context());
	}

	public String onMouseOverSemaine() {
		return "javascript:document.getElementById('img_semaine').src='" + ((Application) application()).urlImage("parSemaine_over.gif", context())
				+ "';";
	}

	public String onMouseOutSemaine() {
		return "javascript:document.getElementById('img_semaine').src='"
				+ ((Application) application()).urlImage("parSemaine_selected.gif", context()) + "';";
	}

	public boolean choixGraph() {
		return choixGraph;
	}

	public void setChoixGraph(final boolean newChoixGraph) {
		choixGraph = newChoixGraph;
	}

}
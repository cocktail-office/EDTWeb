package org.cocktail.edtweb.server.components;
// Generated by the WOLips Core at Fri Jul 23 08:48:37 CEST 2004

import java.text.ParsePosition;
import java.util.Calendar;
import java.util.GregorianCalendar;

import org.cocktail.edtweb.server.Application;
import org.cocktail.edtweb.server.Jour;
import org.cocktail.edtweb.server.metier.IndividuUlr;
import org.cocktail.edtweb.server.metier.Periodicite;
import org.cocktail.edtweb.server.metier.ResaObjet;
import org.cocktail.edtweb.server.metier.Reservation;
import org.cocktail.edtweb.server.metier.ReservationObjet;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.eocontrol.EOAndQualifier;
import com.webobjects.eocontrol.EOGenericRecord;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.eocontrol.EOSortOrdering;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSTimestamp;
import com.webobjects.foundation.NSTimestampFormatter;

import fr.univlr.cri.util.wo5.DateCtrl;
import fr.univlr.cri.webapp.CRIMailBus;
import fr.univlr.cri.webapp.LRUserInfo;
import fr.univlr.cri.webapp.LRUserInfoDB;

public class EnregistrementOccupationObjet extends EnregistrementOccupationIndividu {
	private static final long serialVersionUID = 4259823621175105218L;
	protected boolean pourLeCompteDe;
	protected boolean rechercheindividu;

	/** @TypeInfo LRUserInfo */
	protected NSMutableArray listeIndividu;
	protected LRUserInfo aUserInfo;
	protected String nom;
	protected String prenom;
	protected LRUserInfo individuSelectionne;

	public EnregistrementOccupationObjet(final WOContext context) {
		super(context);
	}

	protected ResaObjet getObjet() {
		return (ResaObjet) session().objectForKey(EDTObjetMenu.OBJET_SELECTED);
	}

	protected void initComposant() {
		setPourLeCompteDe(false);
		super.initComposant();
	}

	// fonction pour "pour le compte de"
	public WOComponent resaPourLeCompteDe() {
		setPourLeCompteDe(true);
		setRechercheindividu(false);
		setNom(null);
		setPrenom(null);
		listeIndividu = new NSMutableArray();
		return null;
	}

	public boolean pourLeCompteDe() {
		return pourLeCompteDe;
	}

	public void setPourLeCompteDe(final boolean newPourLeCompteDe) {
		pourLeCompteDe = newPourLeCompteDe;
	}

	public boolean rechercheindividu() {
		return rechercheindividu;
	}

	public void setRechercheindividu(final boolean newRechercheindividu) {
		rechercheindividu = newRechercheindividu;
	}

	/** @TypeInfo LRUserInfo */
	public NSMutableArray listeIndividu() {
		return listeIndividu;
	}

	public void setListeIndividu(final NSMutableArray newListeIndividu) {
		listeIndividu = newListeIndividu;
	}

	public LRUserInfo aUserInfo() {
		return aUserInfo;
	}

	public void setAUserInfo(final LRUserInfo newAUserInfo) {
		aUserInfo = newAUserInfo;
	}

	public String nom() {
		return nom;
	}

	public void setNom(final String newNom) {
		nom = newNom;
	}

	public String prenom() {
		return prenom;
	}

	public void setPrenom(final String newPrenom) {
		prenom = newPrenom;
	}

	public WOComponent rechercherIndividu() {
		final NSMutableArray args = new NSMutableArray();
		if (nom() != null) {
			args.addObject(EOQualifier.qualifierWithQualifierFormat("adrNom caseInsensitiveLike %@", new NSArray(nom() + "*")));
		}
		if (prenom() != null) {
			args.addObject(EOQualifier.qualifierWithQualifierFormat("adrPrenom caseInsensitiveLike %@", new NSArray(prenom() + "*")));
		}
		if (nom() == null && prenom() == null) {
			return null;
		}
		final NSMutableArray sort = new NSMutableArray();
		sort.addObject(EOSortOrdering.sortOrderingWithKey("adrNom", EOSortOrdering.CompareAscending));
		sort.addObject(EOSortOrdering.sortOrderingWithKey("adrPrenom", EOSortOrdering.CompareAscending));
		final NSArray liste = criApp.dataBus().fetchArray(localEContext(), "Adresse", new EOAndQualifier(args), sort, true);
		for (int i = 0; i < liste.count(); i++) {
			final Number noIndividu = (Number) ((EOGenericRecord) liste.objectAtIndex(i)).valueForKey("noIndividu");
			final LRUserInfoDB user = new LRUserInfoDB(criApp.dataBus());
			user.individuForNoIndividu(noIndividu, false);
			if (listeIndividu == null) {
				listeIndividu = new NSMutableArray();
			}
			listeIndividu.addObject(user);
		}
		if (listeIndividu != null && listeIndividu.count() > 0) {
			setRechercheindividu(true);
		}
		return null;
	}

	public String affichageIndividu() {
		return aUserInfo().nomEtPrenom();
	}

	public LRUserInfo individuSelectionne() {
		return individuSelectionne;
	}

	public void setIndividuSelectionne(final NSMutableArray newIndividuSelectionne) {
		individuSelectionne = (LRUserInfo) newIndividuSelectionne.lastObject();
	}

	public WOComponent choisirUtilisateur() {
		return null;
	}

	public WOComponent annulerPourLeCompte() {
		setPourLeCompteDe(false);
		individuSelectionne = null;
		listeIndividu = null;
		return null;
	}

	public LRUserInfo localUser() {
		final LRUserInfoDB user = new LRUserInfoDB(criApp.dataBus());
		user.individuForNoIndividu((new Integer(criSession().connectedUserInfo().noIndividu().intValue())), true);
		return user;
	}

	private boolean envoiMail(final NSArray debut, final NSArray fin, final ResaObjet objet, final LRUserInfo user) {
		String message = new String();
		final String title = "Reservation " + objet.roLibelle1() + " du " + debut.objectAtIndex(0) + " au " + fin.objectAtIndex(0);
		message = "Reservation : " + objet.roLibelle1() + "\n\n";
		message += "Periodicite(s) :\n";
		for (int i = 0; i < debut.count(); i++) {
			message += "\tDu " + debut.objectAtIndex(i) + " au " + fin.objectAtIndex(i);
		}
		String destinataires = user.email();
		for (int i = 0; i < objet.resaObjetDepositaires().count(); i++) {
			final EOGenericRecord individu = (EOGenericRecord) objet.resaObjetDepositaires().objectAtIndex(i);
			final LRUserInfoDB depo = new LRUserInfoDB(criApp.dataBus());
			depo.individuForNoIndividu((Number) individu.valueForKey("noIndividu"), true);
			destinataires += "," + depo.email();
		}
		final CRIMailBus mailBus = new CRIMailBus(criApp.config());
		if (((Application) application()).emailDeRedirection() != null) {
			destinataires = ((Application) application()).emailDeRedirection();
		}
		return mailBus.sendMail(user.email(), destinataires, null, title, message);
	}

	public WOComponent faireReservation() {
		if (!selectionPlusieurJour()) {
			setErreurEnregistrement(reservationMultiSemaine2());
		}
		else {
			setErreurEnregistrement(reservationSelectionPllusieurJour2());
		}
		if (getErreurEnregistrement() != null) {
			return null;
		}
		session().setObjectForKey(new Boolean(true), EDTIndividu.SHOW_PLANNING);
		session().setObjectForKey(new Boolean(true), "refreshComposant");
		session().setObjectForKey(new Boolean(true), "Form");

		session().setObjectForKey(new Boolean(false), "voirGraphique");
		session().setObjectForKey(new Boolean(false), "CHOIX_PAR_GRAPH");
		//
		return null;
	}

	public String reservationMultiSemaine2() {

		final NSArray semaines = getAllWeeks();
		// ****LUDO
		if (semaines == null) {
			return "Probleme avec les semaines";
		}
		final NSMutableArray listeHeureReserver = new NSMutableArray();
		// ********LUDO
		if (!lundi() && !mardi() && !mercredi() && !jeudi() && !vendredi() && !samedi() && !dimanche()) {
			return "cocher au moins un jour";
		}

		// *******LUDO
		if ((Integer.parseInt(heureDebut()) > 23) || (Integer.parseInt(heureFin()) > 23) || (Integer.parseInt(minuteDebut()) > 60)
				|| (Integer.parseInt(minuteFin()) > 60)) {
			return "Horaire incoherent";
		}

		// CrÈation des dates debut et fin a rÈserver
		for (int i = 0; i < semaines.count(); i++) {
			final Integer noSemaine = (Integer) semaines.objectAtIndex(i);
			final int annee = selectedYear().intValue();

			final GregorianCalendar debut = new GregorianCalendar();
			// Lundi est le premier jour de la semaine
			debut.setFirstDayOfWeek(Calendar.MONDAY);
			// La première semaine est celle qui contient
			// le premier jeudi de Janvier
			debut.setMinimalDaysInFirstWeek(4);
			// debut.setTimeZone(TimeZone.getTimeZone("GMT"));
			debut.set(Calendar.YEAR, annee);
			debut.set(Calendar.WEEK_OF_YEAR, noSemaine.intValue());
			// On retire l'heure ajouter pour l'affichage
			try {
				debut.set(Calendar.HOUR_OF_DAY, Integer.parseInt(heureDebut()));
				debut.set(Calendar.MINUTE, Integer.parseInt(minuteDebut()));
			}
			catch (final Throwable e) {
				return "Heure de dÈbut incorrecte";
			}

			debut.set(Calendar.SECOND, 0);

			final GregorianCalendar fin = new GregorianCalendar();
			// Lundi est le premier jour de la semaine
			fin.setFirstDayOfWeek(Calendar.MONDAY);
			// La première semaine est celle qui contient
			// le premier jeudi de Janvier
			fin.setMinimalDaysInFirstWeek(4);
			// fin.setTimeZone(TimeZone.getTimeZone("GMT"));
			fin.set(Calendar.YEAR, annee);
			fin.set(Calendar.WEEK_OF_YEAR, noSemaine.intValue());
			try {
				fin.set(Calendar.HOUR_OF_DAY, Integer.parseInt(heureFin()));
				fin.set(Calendar.MINUTE, Integer.parseInt(minuteFin()));
			}
			catch (final Exception e) {
				return "Heure de fin incorrecte";
			}

			fin.set(Calendar.SECOND, 0);

			// ///*****LUDO

			if (fin.getTimeInMillis() <= debut.getTimeInMillis()) {
				return "Date de debut et de fin incoherentes";
			}

			if (lundi()) {
				debut.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
				debut.setGregorianChange(debut.getGregorianChange());
				fin.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
				fin.setGregorianChange(fin.getGregorianChange());
				listeHeureReserver.addObject(new Jour(debut));
				listeHeureReserver.addObject(new Jour(fin));
			}
			if (mardi()) {
				debut.set(Calendar.DAY_OF_WEEK, Calendar.TUESDAY);
				debut.setGregorianChange(debut.getGregorianChange());
				fin.set(Calendar.DAY_OF_WEEK, Calendar.TUESDAY);
				fin.setGregorianChange(fin.getGregorianChange());

				listeHeureReserver.addObject(new Jour(debut));
				listeHeureReserver.addObject(new Jour(fin));
			}
			if (mercredi()) {
				debut.set(Calendar.DAY_OF_WEEK, Calendar.WEDNESDAY);
				debut.setGregorianChange(debut.getGregorianChange());
				fin.set(Calendar.DAY_OF_WEEK, Calendar.WEDNESDAY);
				fin.setGregorianChange(fin.getGregorianChange());
				listeHeureReserver.addObject(new Jour(debut));
				listeHeureReserver.addObject(new Jour(fin));
			}
			if (jeudi()) {
				debut.set(Calendar.DAY_OF_WEEK, Calendar.THURSDAY);
				debut.setGregorianChange(debut.getGregorianChange());
				fin.set(Calendar.DAY_OF_WEEK, Calendar.THURSDAY);
				fin.setGregorianChange(fin.getGregorianChange());
				// LRLog.trace("debut = "+(new Jour(debut)).toStringComplet());
				// LRLog.trace("fin = "+(new Jour(fin)).toStringComplet());
				listeHeureReserver.addObject(new Jour(debut));
				listeHeureReserver.addObject(new Jour(fin));
			}
			if (vendredi()) {
				debut.set(Calendar.DAY_OF_WEEK, Calendar.FRIDAY);
				debut.setGregorianChange(debut.getGregorianChange());
				fin.set(Calendar.DAY_OF_WEEK, Calendar.FRIDAY);
				fin.setGregorianChange(fin.getGregorianChange());
				// LRLog.trace("debut = "+(new Jour(debut)).toStringComplet());
				// LRLog.trace("fin = "+(new Jour(fin)).toStringComplet());
				listeHeureReserver.addObject(new Jour(debut));
				listeHeureReserver.addObject(new Jour(fin));
			}
			if (samedi()) {
				debut.set(Calendar.DAY_OF_WEEK, Calendar.SATURDAY);
				// LRLog.trace("debut = "+(new Jour(debut)).toStringComplet());
				fin.set(Calendar.DAY_OF_WEEK, Calendar.SATURDAY);
				fin.setGregorianChange(fin.getGregorianChange());
				// LRLog.trace("fin = "+(new Jour(fin)).toStringComplet());
				listeHeureReserver.addObject(new Jour(debut));
				listeHeureReserver.addObject(new Jour(fin));
			}
			if (dimanche()) {
				debut.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);
				debut.setGregorianChange(debut.getGregorianChange());
				fin.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);
				fin.setGregorianChange(fin.getGregorianChange());
				// LRLog.trace("debut = "+(new Jour(debut)).toStringComplet());
				// LRLog.trace("fin = "+(new Jour(fin)).toStringComplet());
				listeHeureReserver.addObject(new Jour(debut));
				listeHeureReserver.addObject(new Jour(fin));
			}
		}

		final ResaObjet objet = getObjet();

		final NSMutableArray periodes = new NSMutableArray();
		for (int i = 0; i < listeHeureReserver.count() - 1; i = i + 2) {
			final Jour debut = (Jour) listeHeureReserver.objectAtIndex(i);
			final Jour fin = (Jour) listeHeureReserver.objectAtIndex(i + 1);
			periodes.addObject(debut.toNSTimestamp());
			periodes.addObject(fin.toNSTimestamp());
		}
		if (!verifierObjetDisponibilite(objet, periodes)) {
			return "Objet non libre !";
		}

		IndividuUlr agent = (IndividuUlr) criApp.dataBus().fetchObject(
				localEContext(),
				IndividuUlr.ENTITY_NAME,
				EOQualifier.qualifierWithQualifierFormat(IndividuUlr.NO_INDIVIDU_KEY + " = %@", new NSArray(criSession().connectedUserInfo()
						.noIndividu())));

		for (int i = 0; i < listeHeureReserver.count() - 1; i = i + 2) {
			final Jour debut = (Jour) listeHeureReserver.objectAtIndex(i);
			final Jour fin = (Jour) listeHeureReserver.objectAtIndex(i + 1);

			NSTimestamp dateDeb = strToDate(DateCtrl.dateToString(debut.toNSTimestamp(), FORMATER), "%d/%m/%Y %H:%M");
			NSTimestamp dateFin = strToDate(DateCtrl.dateToString(fin.toNSTimestamp(), FORMATER), "%d/%m/%Y %H:%M");

			try {
				// Creation d'une Reservation
				Reservation nouveauReservation = Reservation.getInstance(localEContext());
				localEContext().insertObject(nouveauReservation);
				nouveauReservation.setResaObjet(localEContext(), objet);
				nouveauReservation.setIndividuUlrRelationship(agent);
				nouveauReservation.setNoIndividuClient(agent.noIndividu());
				nouveauReservation.setResaCommentaire(objetResa);
				nouveauReservation.reservationObjet().setResaEtat("P");
				nouveauReservation.setTlocCode(Reservation.TLOC_CODE_DEFAULT);
				nouveauReservation.setDCreation(new NSTimestamp());
				nouveauReservation.setDModification(nouveauReservation.dCreation());

				// Creation d'une Périodicite
				Periodicite nouveauPeriodicite = Periodicite.getInstance(localEContext());
				localEContext().insertObject(nouveauPeriodicite);
				nouveauPeriodicite.setReservationRelationship(nouveauReservation);
				nouveauPeriodicite.setDateDeb(dateDeb);
				nouveauPeriodicite.setDateFin(dateFin);
				nouveauPeriodicite.setHcomp(new Integer(0));
			}
			catch (Exception e) {
				e.printStackTrace();
				localEContext().revert();
				return "Pb lors de la création... Réservation non enregistrée !!";
			}

			localEContext().lock();
			try {
				localEContext().saveChanges();
			}
			catch (Exception exe) {
				exe.printStackTrace();
				localEContext().revert();
				return "Pb lors de la création ! Réservation non enregistrée !!";
			}
			finally {
				localEContext().unlock();
			}
		}
		return null;
	}

	private String reservationSelectionPllusieurJour2() {
		// on ajout un jour car le premier de la semaine est le 0 avec GC et 1
		// avec NSTimestamp
		Jour debut = null;
		try {
			debut = new Jour(dateDebut());// .timestampByAddingGregorianUnits(0,0,1,0,0,0));
			// pdm pas de ça, il faut laisser le tz par défaut défini dans le
			// fichier de config !
			// debut.setTimeZone(TimeZone.getTimeZone("GMT"));
			debut.set(Calendar.HOUR_OF_DAY, Integer.parseInt(heureDebut()));
			debut.set(Calendar.MINUTE, Integer.parseInt(minuteDebut()));
		}
		catch (final Throwable e) {
			return "Date de début incorrecte";
		}
		debut.set(Calendar.SECOND, 0);

		// on ajout un jour car le premier de la semaine est le 0 avec GC et 1
		// avec NSTimestamp
		Jour fin = null;
		try {
			fin = new Jour(dateFin());// .timestampByAddingGregorianUnits(0,0,1,0,0,0));
			// pdm pas de ça, il faut laisser le tz par défaut défini dans le
			// fichier de config !
			// fin.setTimeZone(TimeZone.getTimeZone("GMT"));
			fin.set(Calendar.HOUR_OF_DAY, Integer.parseInt(heureFin()));
			fin.set(Calendar.MINUTE, Integer.parseInt(minuteFin()));
		}
		catch (final Throwable e) {
			return "Date de fin incorrecte";
		}

		fin.set(Calendar.SECOND, 0);
		final ResaObjet objet = getObjet();

		final NSMutableArray periodes = new NSMutableArray();
		periodes.addObject(debut.toNSTimestamp());
		periodes.addObject(fin.toNSTimestamp());

		if (!verifierObjetDisponibilite(objet, periodes)) {
			return "Objet non libre !";
		}

		IndividuUlr agent = (IndividuUlr) criApp.dataBus().fetchObject(
				localEContext(),
				IndividuUlr.ENTITY_NAME,
				EOQualifier.qualifierWithQualifierFormat(IndividuUlr.NO_INDIVIDU_KEY + " = %@", new NSArray(criSession().connectedUserInfo()
						.noIndividu())));

		try {
			// Creation d'une Reservation
			Reservation nouveauReservation = Reservation.getInstance(localEContext());
			localEContext().insertObject(nouveauReservation);
			nouveauReservation.setResaObjet(localEContext(), objet);
			nouveauReservation.setIndividuUlrRelationship(agent);
			nouveauReservation.setNoIndividuClient(agent.noIndividu());
			nouveauReservation.setResaCommentaire(objetResa);
			nouveauReservation.reservationObjet().setResaEtat("P");
			nouveauReservation.setTlocCode(Reservation.TLOC_CODE_DEFAULT);
			nouveauReservation.setDCreation(new NSTimestamp());
			nouveauReservation.setDModification(nouveauReservation.dCreation());

			// Creation d'une Périodicite
			Periodicite nouveauPeriodicite = Periodicite.getInstance(localEContext());
			localEContext().insertObject(nouveauPeriodicite);
			nouveauPeriodicite.setReservationRelationship(nouveauReservation);
			nouveauPeriodicite.setDateDeb(debut.toNSTimestamp());
			nouveauPeriodicite.setDateFin(fin.toNSTimestamp());
			nouveauPeriodicite.setHcomp(new Integer(0));
		}
		catch (Exception e) {
			e.printStackTrace();
			localEContext().revert();
			return "Pb lors de la création... Réservation non enregistrée !!";
		}

		localEContext().lock();
		try {
			localEContext().saveChanges();
		}
		catch (Exception exe) {
			exe.printStackTrace();
			localEContext().revert();
			return "Pb lors de la création ! Réservation non enregistrée !!";
		}
		finally {
			localEContext().unlock();
		}

		return null;

	}

	private boolean verifierObjetDisponibilite(ResaObjet objet, NSArray periodicites) {
		for (int i = 0; i < periodicites.count(); i += 2) {
			NSTimestamp dateDeb = (NSTimestamp) periodicites.objectAtIndex(i);
			NSTimestamp dateFin = (NSTimestamp) periodicites.objectAtIndex(i + 1);
			dateDeb = dateInLocalTZ(dateDeb);
			dateFin = dateInLocalTZ(dateFin);

			NSMutableArray quals = new NSMutableArray();
			quals.addObject(EOQualifier.qualifierWithQualifierFormat(Periodicite.RESERVATION_KEY + "." + Reservation.RESERVATION_OBJETS_KEY + "."
					+ ReservationObjet.RESA_OBJET_KEY + " = %@", new NSArray(objet)));
			quals.addObject(EOQualifier.qualifierWithQualifierFormat(Periodicite.DATE_FIN_KEY + " > %@ and " + Periodicite.DATE_DEB_KEY
					+ " < %@ and " + Periodicite.RESERVATION_KEY + "." + Reservation.RESERVATION_OBJETS_KEY + "." + ReservationObjet.RESA_ETAT_KEY
					+ "  <> 'A'", new NSArray(new Object[] { dateDeb, dateFin })));

			NSArray periods = criApp.dataBus().fetchArray(localEContext(), Periodicite.ENTITY_NAME, new EOAndQualifier(quals), null);
			if (periods != null && periods.count() > 0) {
				return false;
			}
		}
		return true;
	}

	private NSTimestamp dateInLocalTZ(NSTimestamp date) {
		NSTimestampFormatter formatter = new NSTimestampFormatter("%d/%m/%Y %H:%M:%S");
		String sDate = formatter.format(date);
		return strToDate(sDate, "%d/%m/%Y %H:%M:%S");
	}

	private NSTimestamp strToDate(String strDate, String format) {
		NSTimestampFormatter formatter = new NSTimestampFormatter(format);
		try {
			return (NSTimestamp) formatter.parseObject(strDate, new ParsePosition(0));
		}
		catch (Exception e) {
			return null;
		}
	}

}
package org.cocktail.edtweb.server.components;
// Generated by the WOLips Core at Fri Jul 09 10:25:00 CEST 2004

import org.cocktail.edtweb.server.Application;
import org.cocktail.edtweb.server.Session;
import org.cocktail.edtweb.server.metier.IndividuUlr;
import org.cocktail.edtweb.server.metier.ResaObjet;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WORedirect;
import com.webobjects.appserver.WOResponse;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSData;
import com.webobjects.foundation.NSMutableDictionary;
import com.webobjects.foundation.NSTimestamp;

import fr.univlr.cri.webapp.CRIWebAction;
import fr.univlr.cri.webapp.CRIWebPage;

public class Main extends CRIWebPage {
	private static final long serialVersionUID = -4328335590724280230L;
	// private int affichageEnCours;
	public static final int AFFICHE_RIEN = 0;
	public static final int AFFICHE_IDENTIFICATION = 1;
	public static final int AFFICHE_INDIVIDU = 2;
	public static final int AFFICHE_OBJET = 3;
	public static final int AFFICHE_SALLES = 4;
	public static final int AFFICHE_REUNION = 5;
	public static final int AFFICHE_EXAMEN = 6;
	public static final int AFFICHE_INDIVIDU_PUBLIC = 7;
	public static final int AFFICHE_DIPLOME = 8;
	public static final int AFFICHE_CHOIX_INDIVIDU = 9;
	public static final int AFFICHE_INDIVIDU_CHOISI = 10;
	protected NSTimestamp dateDebut;
	protected String heureDebut;
	protected String heureFin;

	private static final String WINDOW_NAME = "pageprincipaleedtweb";
	public NSArray keyList;
	public String selection;
	public boolean choixTerme = true;
	public boolean showphoto = false;
	NSData photoIndiv;
	public boolean addResa;

	public String loginPublic;

	public Main(final WOContext context) {
		super(context);
		dateDebut = new NSTimestamp();
		heureDebut = (new Integer(((Application) application()).heureDebutParDefaut())).toString();
		heureFin = (new Integer(((Application) application()).heureFinParDefaut())).toString();
		((Session) session()).setAffichageEnCours(AFFICHE_RIEN);
		// keyList = new NSArray(new Object[] { "Quotidienne", "Hebdomadaire", "Mensuelle Calendrier", "Mensuelle Texte", "Tableau De Bord"
		// });
		keyList = new NSArray(new Object[] { "Hebdomadaire", "Mensuelle Calendrier", "Mensuelle Texte", "Tableau De Bord" });
		selection = "Hebdomadaire";
		session().setObjectForKey(new Boolean(false), "showphoto");
		// ajouter
		addResa = true;
		session().setObjectForKey(dateDebut, "dateDebut");
		session().setObjectForKey(heureDebut, "heureDebut");
		session().setObjectForKey(heureFin, "heureFin");
		((Session) session()).setMainPage(this);
		// fin ajouter
	}

	public boolean conditionAjoutResaObjet() {
		IndividuUlr ind = IndividuUlr.fetchRequiredIndividuUlr(session().defaultEditingContext(), IndividuUlr.NO_INDIVIDU_KEY, criSession()
				.connectedUserInfo().noIndividu());
		return VerificationFactory.testIndividuADroitReserverObjet(session().defaultEditingContext(), ind,
				(ResaObjet) session().objectForKey(EDTObjetMenu.OBJET_SELECTED));
	}

	// fonction pour aller au differents services
	public WOComponent goIndividu() {
		closeAll();
		session().setObjectForKey(new Integer(EDTLogin.IDENTIFICATION_INDIVIDU), EDTLogin.TYPE_IDENTIFICATION);
		if (CRIWebAction.useCasService()) {
			if (criSession().connectedUserInfo() == null) {
				session().setObjectForKey(new Boolean(true), "Form");// ajouter
				return goCas();
			}
			else {
				final EDTLogin page = (EDTLogin) pageWithName("EDTLogin");
				page.action();
			}
		}
		else {
			if (criSession().connectedUserInfo() != null) {
				final EDTLogin page = (EDTLogin) pageWithName("EDTLogin");
				session().setObjectForKey(new Boolean(true), "Form");// ajouter
				page.action();
			}
			else {
				((Session) session()).setAffichageEnCours(AFFICHE_IDENTIFICATION);
			}
			session().setObjectForKey(new Boolean(true), "refresh");
		}
		session().setObjectForKey(new Boolean(true), "Form");
		return null;
	}

	public WOComponent goObjet() {
		closeAll();
		session().setObjectForKey(new Integer(EDTLogin.IDENTIFICATION_OBJET), EDTLogin.TYPE_IDENTIFICATION);
		if (CRIWebAction.useCasService()) {
			if (criSession().connectedUserInfo() == null) {
				return goCas();
			}
			else {
				final EDTLogin page = (EDTLogin) pageWithName("EDTLogin");
				page.action();
			}
		}
		else {
			if (criSession().connectedUserInfo() != null) {
				final EDTLogin page = (EDTLogin) pageWithName("EDTLogin");
				page.action();
			}
			else {
				((Session) session()).setAffichageEnCours(AFFICHE_IDENTIFICATION);
			}
			session().setObjectForKey(new Boolean(true), "refresh");
		}
		session().setObjectForKey(new Boolean(true), "Form");

		return null;
	}

	public WOComponent goSalles() {
		closeAll();
		((Session) session()).setAffichageEnCours(AFFICHE_SALLES);
		// choixTerme = false;
		selection = "Hebdomadaire";// ajouter
		return null;
	}

	public WOComponent goReunion() {
		closeAll();
		((Session) session()).setAffichageEnCours(AFFICHE_REUNION);
		// choixTerme = false;
		return null;
	}

	public WOComponent goExamen() {
		if (((Session) session()).getMainPage().useExamens()) {
			closeAll();
			((Session) session()).setAffichageEnCours(AFFICHE_EXAMEN);
			// choixTerme = false;
		}
		return null;
	}

	public WOComponent goDiplome() {
		if (((Session) session()).getMainPage().useDiplomes()) {
			closeAll();
			((Session) session()).setAffichageEnCours(AFFICHE_DIPLOME);
			// choixTerme = false;
		}
		return null;
	}

	// affichage de la selection
	public String classLienMenuTopIndividu() {
		if (((Session) session()).getAffichageEnCours() == AFFICHE_INDIVIDU || ((Session) session()).getAffichageEnCours() == AFFICHE_INDIVIDU_CHOISI
				|| ((Session) session()).getAffichageEnCours() == AFFICHE_CHOIX_INDIVIDU) {
			return "menuItemSelected";
		}
		return "menuItem";
	}

	public String classLienMenuTopObjet() {
		if (((Session) session()).getAffichageEnCours() == AFFICHE_OBJET) {
			return "menuItemSelected";
		}
		return "menuItem";
	}

	public String classLienMenuTopSalles() {
		if (((Session) session()).getAffichageEnCours() == AFFICHE_SALLES) {
			return "menuItemSelected";
		}
		return "menuItem";
	}

	public String classLienMenuTopReunion() {
		if (((Session) session()).getAffichageEnCours() == AFFICHE_REUNION) {
			return "menuItemSelected";
		}
		return "menuItem";
	}

	public String classLienMenuTopExamen() {
		if (((Session) session()).getAffichageEnCours() == AFFICHE_EXAMEN) {
			return "menuItemSelected";
		}
		return "menuItem";
	}

	public String classLienMenuTopDiplome() {
		if (((Session) session()).getAffichageEnCours() == AFFICHE_DIPLOME) {
			return "menuItemSelected";
		}
		return "menuItem";
	}

	// Fonction permettant l'affichage des composants
	public boolean showIdentification() {
		return ((Session) session()).getAffichageEnCours() == AFFICHE_IDENTIFICATION;
	}

	public boolean showIndividu() {
		session().setObjectForKey(new Boolean(true), "Form");// ajouter
		return ((Session) session()).getAffichageEnCours() == AFFICHE_INDIVIDU;
	}

	public boolean showObjet() {
		return ((Session) session()).getAffichageEnCours() == AFFICHE_OBJET;
	}

	public boolean showSalles() {
		return ((Session) session()).getAffichageEnCours() == AFFICHE_SALLES;
	}

	public boolean showReunion() {
		return ((Session) session()).getAffichageEnCours() == AFFICHE_REUNION;
	}

	public boolean showExamen() {
		return ((Session) session()).getAffichageEnCours() == AFFICHE_EXAMEN;
	}

	public boolean showIndividuPublic() {
		return ((Session) session()).getAffichageEnCours() == AFFICHE_INDIVIDU_PUBLIC;
	}

	public boolean showDiplome() {
		return ((Session) session()).getAffichageEnCours() == AFFICHE_DIPLOME;
	}

	public boolean showIndividuChoix() {
		return ((Session) session()).getAffichageEnCours() == AFFICHE_CHOIX_INDIVIDU;
	}

	public boolean showIndividuChoisi() {
		return ((Session) session()).getAffichageEnCours() == AFFICHE_INDIVIDU_CHOISI;
	}

	public boolean useDiplomes() {
		return ((Application) criApp).useDiplomes();
	}

	public boolean useExamens() {
		return ((Application) criApp).useExamens();
	}

	public void setAffichage(final int show) {
		((Session) session()).setAffichageEnCours(show);
	}

	public boolean pageVide() {
		return ((Session) session()).getAffichageEnCours() == AFFICHE_RIEN;
	}

	// fonction li√©e a l'identification cas
	private WOComponent goCas() {
		final WORedirect page = (WORedirect) criApp.pageWithName("WORedirect", context());
		page.setUrl(CRIWebAction.getLoginActionURL(context(), false, null, true, null));
		return page;
	}

	private void closeAll() {
		session().setObjectForKey(NullValue, EDTIndividu.OBJET_RESA);
		session().setObjectForKey(NullValue, EDTIndividuChoisi.INDIVIDU_CHOISI);
		session().setObjectForKey(Boolean.FALSE, EDTSalleMenu.SHOW_PLANNING);
		session().setObjectForKey(Boolean.FALSE, EDTObjetMenu.SHOW_PLANNING);
		session().setObjectForKey(Boolean.FALSE, EDTReunionMenu.SHOW_PLANNING);
		session().setObjectForKey(Boolean.FALSE, EDTExamenMenu.SHOW_PLANNING);
		session().setObjectForKey(Boolean.FALSE, EDTReunion.REFRESH);
		session().setObjectForKey(Boolean.FALSE, EDTIndividuChoix.REFRESH);
	}

	public NSTimestamp dateDebut() {
		return dateDebut;
	}

	public void setDateDebut(final NSTimestamp newDateDebut) {
		dateDebut = newDateDebut;
	}

	public String heureDebut() {
		return heureDebut;
	}

	public void setHeureDebut(final String newHeureDebut) {
		heureDebut = newHeureDebut;
	}

	public String heureFin() {
		return heureFin;
	}

	public void setHeureFin(final String newHeureFin) {
		heureFin = newHeureFin;
	}

	public WOComponent goJour() {
		session().setObjectForKey("PlanningParJour", EDTIndividu.TYPE_PLANNING);
		AffichePlanning.selectPlanningParJour = false;
		PlanningMois.selectPlanningParJour = false;
		return null;
	}

	public WOComponent goSem() {
		session().setObjectForKey("AffichePlanning", EDTIndividu.TYPE_PLANNING);
		session().setObjectForKey(new Boolean(true), "refreshComposant");// ajouter
		return null;
	}

	public WOComponent goMC() {
		session().setObjectForKey("PlanningMois", EDTIndividu.TYPE_PLANNING);
		return null;
	}

	public WOComponent goMT() {
		session().setObjectForKey("PlanningMTexte", EDTIndividu.TYPE_PLANNING);
		return null;
	}

	public WOComponent goCarnet() {
		session().setObjectForKey("Carnet", EDTIndividu.TYPE_PLANNING);
		return null;
	}

	public String getSelection() {
		return selection;
	}

	public void setSelection(final String newSelection) {
		selection = newSelection;
	}

	public void whereGo() {
		if ((getSelection() != null) && (getSelection().equals("Quotidienne"))) {// ajouter
			goJour();
		}
		if ((getSelection() != null) && (getSelection().equals("Hebdomadaire"))) {// ajouter
			goSem();
		}
		if ((getSelection() != null) && (getSelection().equals("Mensuelle Calendrier"))) {// ajouter
			goMC();
		}
		if ((getSelection() != null) && (getSelection().equals("Mensuelle Texte"))) {// ajouter
			goMT();
		}
		if ((getSelection() != null) && (getSelection().equals("Tableau De Bord"))) {// ajouter
			goCarnet();
		}

	}

	public String planning() {
		return (String) session().objectForKey(EDTIndividu.TYPE_PLANNING);
	}

	public void appendToResponse(final WOResponse arg0, final WOContext arg1) {
		if (AffichePlanning.selectPlanningParJour) {
			setSelection("Quotidienne");
		}
		if (PlanningMois.selectPlanningParJour) {
			setSelection("Quotidienne");
		}

		showphoto = ((Boolean) session().objectForKey("showphoto")).booleanValue();
		photoIndiv = (NSData) session().objectForKey("photo");
		if ((getSelection() != null) && (getSelection().equals("Hebdomadaire"))) {
			addResa = true;
		}
		else {
			addResa = false;
		}
		super.appendToResponse(arg0, arg1);
		addScriptResource(arg0, null, "window.name = '" + WINDOW_NAME + "';", null, RESOURCE_TYPE_JSCRIPT, RESOURCE_DEST_END_HEAD, RESOURCE_NONE);
	}

	public String directActionIcal() {
		final NSMutableDictionary dico = new NSMutableDictionary();
		dico.takeValueForKey("1", "agenda");
		dico.takeValueForKey(loginPublic, "login");
		dico.takeValueForKey("yes", "ical");
		String url = context().directActionURLForActionNamed("default", dico);
		if (url.indexOf("&wosid") > 0) {
			url = url.substring(0, url.indexOf("&wosid"));
		}
		return url;
	}

	public void setLogin(final String newLogin) {
		loginPublic = newLogin;
	}

	// fin ajouter==========

}
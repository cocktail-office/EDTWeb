package org.cocktail.edtweb.server.components;
// Generated by the WOLips Core at Tue Jul 27 10:54:31 CEST 2004

import org.cocktail.edtweb.server.AffichePlanningResponder;
import org.cocktail.edtweb.server.Application;
import org.cocktail.edtweb.server.EDTObject;
import org.cocktail.edtweb.server.Heure;
import org.cocktail.edtweb.server.Session;
import org.cocktail.edtweb.server.Utils;
import org.cocktail.edtweb.server.metier.Periodicite;
import org.cocktail.edtweb.server.metier.Salles;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WOResponse;
import com.webobjects.eocontrol.EOAndQualifier;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.eocontrol.EOSortOrdering;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSTimestamp;
import com.webobjects.foundation.NSTimestampFormatter;

import fr.univlr.cri.util.StringCtrl;
import fr.univlr.cri.util.wo5.DateCtrl;
import fr.univlr.cri.webapp.CRIWebComponent;

public class EDTSallePlanning extends CRIWebComponent {
	private static final long serialVersionUID = -3628627731379096879L;

	private static final String OBJET_RESA = "ResaDate";

	public NSTimestamp dateDebut;

	public String heureDebut;

	public String heureFin;

	public Responder responder;

	private NSMutableArray listeResa;

	private EOQualifier theQualifier;

	public EDTSallePlanning(final WOContext context) {
		super(context);
		initEDTSalle();
	}

	public EOEditingContext localEContext() {
		return session().defaultEditingContext();
	}

	public void initEDTSalle() {
		listeResa = new NSMutableArray();
		responder = new Responder();
		dateDebut = new NSTimestamp();
		heureDebut = (new Integer(((Application) application()).heureDebutParDefaut())).toString();
		heureFin = (new Integer(((Application) application()).heureFinParDefaut())).toString();
		final NSMutableArray liste = new NSMutableArray();
		session().setObjectForKey(liste, AffichePlanning.LISTE_OBJET);
		session().setObjectForKey(responder, AffichePlanning.RESPONDER);
	}

	public Salles salleSelected() {
		return (Salles) session().objectForKey(EDTSalleMenu.SALLE_SELECTED);
	}

	public void appendToResponse(final WOResponse arg0, final WOContext arg1) {
		if (session().objectForKey("refresh") != null && ((Boolean) session().objectForKey("refresh")).booleanValue()) {
			session().setObjectForKey(new Boolean(false), "refresh");
			session().setObjectForKey(new Boolean(true), "refreshComposant");
			session().setObjectForKey("AffichePlanning", EDTIndividu.TYPE_PLANNING);
			// if(affichePlanning())
			initEDTSalle();
		}
		super.appendToResponse(arg0, arg1);
	}

	public String planning() {
		return (String) session().objectForKey(EDTIndividu.TYPE_PLANNING);
	}

	class Responder implements AffichePlanningResponder {

		public String nbObjetDispoForDayAndTime(final Heure aDay) {
			String affichage = "";
			Number resaOrdre = new Integer(0);
			int oldNoResa = -1;

			for (int i = 0; i < listeResa.count(); i++) {
				final EDTObject resaDate = (EDTObject) listeResa.objectAtIndex(i);
				final NSTimestamp debut = resaDate.dateDebut();
				final NSTimestamp fin = resaDate.dateFin();

				if (debut != null && fin != null && debut.before(aDay.fin()) && fin.after(aDay.debut())) {
					session().setObjectForKey(resaDate, OBJET_RESA);
					resaOrdre = ((EDTObject) session().objectForKey(OBJET_RESA)).key();
					if (((Session) session()).getObjetResa().objectForKey(Integer.toString(resaOrdre.intValue())) == null) {
						((Session) session()).getObjetResa().setObjectForKey(resaDate, Integer.toString(resaOrdre.intValue()));
					}
					if (resaOrdre.intValue() != oldNoResa) {
						NSDictionary dico = new NSDictionary(Integer.toString(resaOrdre.intValue()), "objet");
						String url = context().directActionURLForActionNamed("infoForResa", dico);

						affichage += (oldNoResa == -1 ? "" : "<br>");
						// on ajoute 2 fois le lien pour avoir un comportement différent selon l'environnement:
						// - un qui sera affiché uniquement dans l'ent
						// - l'autre affiché uniquement en dehors de l'ent

						// ajout du lien hors ent: ouvre une fenetre séparée
						affichage += "<div class=\"aCacherDansEnt\"><a href=\"#\" onclick=\"" + "messageWindow('"
								+ url + "','Informations','300','300');return false;" + "\"" + " onMouseOver=\"return overlib('" + formatString(title2())
								+ "', CAPTION, '" + formatString(title1()) + "');\" onMouseOut=\"return nd();\"" + "> -&nbsp;" + motifReservation(50)
								+ "</a></div>";
						// ajout du lien pour l'ent: dans la même fenêtre
						affichage += "<div class=\"monDisplayNoneAMoi\"><a href=\"" + url + "\"" + " onMouseOver=\"return overlib('"
								+ formatString(title2()) + "', CAPTION, '" + formatString(title1()) + "');\" onMouseOut=\"return nd();\""
								+ "> -&nbsp;" + motifReservation(50) + "</a></div>";

						oldNoResa = resaOrdre.intValue();
					}

				}

			}
			return affichage;
		}

		public int initPlanning(String typeCode) {
			return 0;
		}

		// Permet la construction d'une partie du qualifier(suivant le type
		// d'objet)
		public int initPlanning(NSMutableArray listeObjetCle) {// ying modifier pour tenter à resoudre le problème de
			// theQualifier=null
			theQualifier = EOQualifier.qualifierWithQualifierFormat("reservation.tosResaSalles.salNumero=%@",
					new NSArray(salleSelected().salNumero()));
			return 0;
		}

		public void initListeResa(NSTimestamp debut, NSTimestamp fin) {
			NSMutableArray tmp = new NSMutableArray();
			NSMutableArray args = new NSMutableArray();
			NSMutableArray args1 = new NSMutableArray();
			args1.addObject(EOQualifier.qualifierWithQualifierFormat(Periodicite.DATE_DEB_KEY + " <= %@", new NSArray(fin)));
			args1.addObject(EOQualifier.qualifierWithQualifierFormat(Periodicite.DATE_FIN_KEY + " >= %@", new NSArray(debut)));
			args.addObject(new EOAndQualifier(args1));
			if (theQualifier != null) {
				args.addObject(theQualifier);
			}
			NSMutableArray sort = new NSMutableArray();
			sort.addObject(EOSortOrdering.sortOrderingWithKey(Periodicite.DATE_DEB_KEY, EOSortOrdering.CompareAscending));
			sort.addObject(EOSortOrdering.sortOrderingWithKey(Periodicite.DATE_FIN_KEY, EOSortOrdering.CompareAscending));

			tmp.addObjectsFromArray(criApp.dataBus().fetchArray(localEContext(), Periodicite.ENTITY_NAME, new EOAndQualifier(args), sort));
			listeResa.removeAllObjects();
			for (int i = 0; i < tmp.count(); i++) {
				Periodicite objet = (Periodicite) tmp.objectAtIndex(i);
				if (objet != null) {
					EDTObject obj = new EDTObject(criApp.dataBus());
					obj.initObjet(objet, EDTObject.TYPE_PERIODICITE);
					listeResa.addObject(obj);
				}
			}
		}

		public String couleurTR() {
			if (session().objectForKey(OBJET_RESA) == null || session().objectForKey(OBJET_RESA) == NullValue) {
				return null;
			}
			Number resaOrdre = ((EDTObject) session().objectForKey(OBJET_RESA)).key();
			if (((Session) session()).getCouleurResa().objectForKey(resaOrdre) == null) {
				String Rouge = Integer.toHexString((new Double(Math.random() * 30)).intValue() + 200 + (resaOrdre.intValue() % 20));
				String Vert = Integer.toHexString((new Double(Math.random() * 30)).intValue() + 200 + (resaOrdre.intValue() % 10));
				String Bleu = Integer.toHexString((new Double(Math.random() * 20)).intValue() + 200 + (resaOrdre.intValue() % 20));
				((Session) session()).getCouleurResa().setObjectForKey("#" + Rouge + Vert + Bleu, resaOrdre);
			}
			return (String) ((Session) session()).getCouleurResa().objectForKey(resaOrdre);
		}

		public WOComponent goReservation() {
			return null;
		}

		public String title1() {
			if (session().objectForKey(OBJET_RESA) != NullValue) {
				final EDTObject resaDate = (EDTObject) session().objectForKey(OBJET_RESA);
				final NSTimestampFormatter formatJour = new NSTimestampFormatter("%d / %m / %Y  à  %H : %M");
				if (resaDate != null) {
					return "Du " + DateCtrl.dateToString(resaDate.dateDebut(), formatJour.pattern()) + " <BR>Au "
							+ DateCtrl.dateToString(resaDate.dateFin(), formatJour.pattern());
				}
			}
			return null;
		}

		public String title2() {
			if (session().objectForKey(OBJET_RESA) != NullValue) {
				final EDTObject resaDate = (EDTObject) session().objectForKey(OBJET_RESA);
				return resaDate.sujet();
			}
			return null;
		}

		public EDTObject getObjetForIndex(final int index) {
			return (EDTObject) listeResa.objectAtIndex(index);
		}

		public NSArray getListeResaObjet(final NSTimestamp debut, final NSTimestamp fin) {
			listeResa.removeAllObjects();
			initListeResa(debut, fin);
			return listeResa;
		}

		public String motifReservation(final int maxCar) {
			String affichage = "";
			final EDTObject resaDate = (EDTObject) session().objectForKey(OBJET_RESA);
			affichage = resaDate.sujet(false);
			if (affichage.length() > maxCar) {
				return Utils.cleanCut(affichage, maxCar - 3) + "...";
			}
			return affichage;
		}

	}

	private String formatString(String str) {
		// remplace les " par \"
		if (str == null) {
			return "";
		}
		str = StringCtrl.replace(str, "\"", "&quot;");
		// remplace les ' par \'
		str = StringCtrl.replace(str, "'", "\\'");
		// remplace le retour chariot
		str = str.replaceAll("\n", "");
		str = StringCtrl.replace(str, "\r", "<BR>");
		return str;
	}

}
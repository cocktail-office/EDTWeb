package org.cocktail.edtweb.server.components;
// Generated by the WOLips Core at Mon Aug 23 11:53:03 CEST 2004

import java.util.Calendar;
import java.util.GregorianCalendar;

import org.cocktail.edtweb.server.AffichePlanningResponder;
import org.cocktail.edtweb.server.Application;
import org.cocktail.edtweb.server.EDTObject;
import org.cocktail.edtweb.server.Heure;
import org.cocktail.edtweb.server.Jour;
import org.cocktail.edtweb.server.Session;
import org.cocktail.edtweb.server.Utils;
import org.cocktail.edtweb.server.metier.Periodicite;
import org.cocktail.edtweb.server.metier.Reservation;
import org.cocktail.edtweb.server.metier.ScolFormationAnnee;
import org.cocktail.edtweb.server.metier.ScolMaquetteParcours;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WOResponse;
import com.webobjects.eocontrol.EOAndQualifier;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOEnterpriseObject;
import com.webobjects.eocontrol.EOGenericRecord;
import com.webobjects.eocontrol.EONotQualifier;
import com.webobjects.eocontrol.EOOrQualifier;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.eocontrol.EOSortOrdering;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSTimestamp;
import com.webobjects.foundation.NSTimestampFormatter;

import fr.univlr.cri.util.wo5.DateCtrl;
import fr.univlr.cri.webapp.CRIWebComponent;
import fr.univlr.cri.webapp.LRLog;
import fr.univlr.cri.webapp.LRUserInfo;
import fr.univlr.cri.webapp.LRUserInfoDB;

public class EDTExamen extends CRIWebComponent {
	/**
	 * 
	 */
	private static final long serialVersionUID = -860677114418149550L;

	private static final String OBJET_RESA = "ResaDate";

	public static String TLOC_CODE = "E";

	public Integer anneeSelectionne;
	private Integer noSemaine;

	public NSMutableArray listeAnnee;
	public Integer uneAnnee;

	public String titrePlanning;

	/** @TypeInfo ScolFormationDiplome */
	public EOEnterpriseObject aDiplome;

	/** @TypeInfo ScolFormationDomaine */
	public NSMutableArray listeDomaine;

	/** @TypeInfo ScolFormationGrade */
	public NSMutableArray listeGrade;

	/** @TypeInfo ScolFormationGrade */
	public EOEnterpriseObject aGrade;

	/** @TypeInfo ScolFormationDomaine */
	public EOEnterpriseObject aDomaine;

	private String diplomeSelected;

	/** @TypeInfo ScolMaquetteParcours */
	public NSMutableArray listeParcours;

	/** @TypeInfo ScolMaquetteParcours */
	public ScolMaquetteParcours aParcours;

	/** @TypeInfo ScolMaquetteRepartitionSem */
	public EOEnterpriseObject aRepartSemestre;
	public int indexRepartSemestre;

	/** @TypeInfo Integer */
	public NSMutableArray listeSemaine;

	/** @TypeInfo ScolMaquetteRepartitionUe */
	public NSMutableArray listeRepartUE;

	/** @TypeInfo ScolMaquetteRepartitionUe */
	public EOEnterpriseObject aRepartUe;

	/** @TypeInfo ScolMaquetteUe */
	public EOEnterpriseObject selectedUe;

	public NSMutableArray listeResa;

	public EOQualifier theQualifier;

	public Responder responder;

	private Jour dateDebut;
	public String heureDebut;
	public String heureFin;

	public EDTExamen(final WOContext context) {
		super(context);

		responder = new Responder();
		dateDebut = new Jour();
		heureDebut = (new Integer(((Application) application()).heureDebutParDefaut())).toString();
		heureFin = (new Integer(((Application) application()).heureFinParDefaut())).toString();
	}

	public EOEditingContext localEContext() {
		return session().defaultEditingContext();
	}

	public Integer getAnneeScolEnCours() {
		if (criApp.config().intForKey("ANNEE_EN_COURS") == -1) {
			ScolFormationAnnee rec = ScolFormationAnnee.fetchScolFormationAnnee(localEContext(), ScolFormationAnnee.FANN_COURANTE_KEY, "O");
			if (rec == null || rec.fannDebut() == null) {
				return null;
			}
			return rec.fannDebut();
		}
		else {
			return new Integer(criApp.config().intForKey("ANNEE_EN_COURS"));
		}
	}

	protected void initListeAnnee() {
		final int anneeCourante = (new GregorianCalendar()).get(Calendar.YEAR);
		listeAnnee = new NSMutableArray();
		for (int i = anneeCourante + 1; i >= anneeCourante - 3; i--) {
			listeAnnee.addObject(new Integer(i));
		}
	}

	public boolean parcoursHasSemestres() {
		NSArray a = aParcours.scolMaquetteRepartitionSems(getAnneeScolEnCours());
		return (a != null && a.count() > 0);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.webobjects.appserver.WOComponent#appendToResponse(com.webobjects.appserver.WOResponse, com.webobjects.appserver.WOContext)
	 */
	public void appendToResponse(final WOResponse arg0, final WOContext arg1) {
		if (session().objectForKey("refresh") != null && ((Boolean) session().objectForKey("refresh")).booleanValue()) {
			if (showDiplomeAvecDomaine()) {
				initListeDommaine();
			}
			if (showDiplomeAvecGrade()) {
				initListeGrade();
			}

			session().setObjectForKey(new Boolean(false), "refresh");
			session().setObjectForKey(new Boolean(true), "refreshComposant");
		}

		super.appendToResponse(arg0, arg1);
	}

	public boolean showPlanning() {
		return (session().objectForKey(EDTExamenMenu.SHOW_PLANNING) != null && ((Boolean) session().objectForKey(EDTExamenMenu.SHOW_PLANNING))
				.booleanValue());
	}

	public void setNoSemaineSelectionne(final Integer noSemaine) {
		// noSemaineSelectionne = noSemaine;
		final GregorianCalendar tmp = new GregorianCalendar();
		// Lundi est le premier jour de la semaine
		tmp.setFirstDayOfWeek(Calendar.MONDAY);
		// La première semaine est celle qui contient
		// le premier jeudi de Janvier
		tmp.setMinimalDaysInFirstWeek(4);
		tmp.set(Calendar.YEAR, anneeSelectionne.intValue());
		tmp.set(Calendar.DAY_OF_WEEK, Calendar.THURSDAY);
		tmp.set(Calendar.WEEK_OF_YEAR, noSemaine.intValue());
		tmp.set(Calendar.DAY_OF_WEEK, Calendar.THURSDAY);
		dateDebut = new Jour(tmp);
		initPlanning();
	}

	public Integer noSemaineSelectionne() {
		return new Integer(dateDebut.noSemaine());
	}

	public Integer getNoSemaine() {
		return noSemaine;
	}

	public void setNoSemaine(final Integer i) {
		noSemaine = i;
	}

	//
	public int fontSizeSemaine() {
		final GregorianCalendar now = new GregorianCalendar();
		// Lundi est le premier jour de la semaine
		now.setFirstDayOfWeek(Calendar.MONDAY);
		// La première semaine est celle qui contient
		// le premier jeudi de Janvier
		now.setMinimalDaysInFirstWeek(4);
		if (getNoSemaine().intValue() == dateDebut.get(Calendar.WEEK_OF_YEAR)) {
			return 5;
		}
		if (getNoSemaine().intValue() == dateDebut.get(Calendar.WEEK_OF_YEAR) - 1
				|| getNoSemaine().intValue() == dateDebut.get(Calendar.WEEK_OF_YEAR) + 1) {
			return 3;
		}
		if (getNoSemaine().intValue() == dateDebut.get(Calendar.WEEK_OF_YEAR) - 2
				|| getNoSemaine().intValue() == dateDebut.get(Calendar.WEEK_OF_YEAR) + 2) {
			return 2;
		}
		return 1;
	}

	//
	public String fontColorSemaine() {
		final GregorianCalendar now = new GregorianCalendar();
		// Lundi est le premier jour de la semaine
		now.setFirstDayOfWeek(Calendar.MONDAY);
		// La première semaine est celle qui contient
		// le premier jeudi de Janvier
		now.setMinimalDaysInFirstWeek(4);
		if (getNoSemaine().intValue() == now.get(Calendar.WEEK_OF_YEAR) && anneeSelectionne.intValue() == now.get(Calendar.YEAR)) {
			return "#ff0000";
		}
		return null;
	}

	//
	public WOComponent selectionNoSemaine() {
		setNoSemaineSelectionne(noSemaine);
		return null;
	}

	//
	public WOComponent selectAnnee() {
		return null;
	}

	public LRUserInfo getLRUserInfoIndividu(final Number noIndividu) {
		final LRUserInfoDB user = new LRUserInfoDB(criApp.dataBus());
		user.individuForNoIndividu(noIndividu, true);
		return user;
	}

	// ***************************************************
	// FONCTION POUR LES DIPLOMES (grade selectionné)
	// ***************************************************
	public boolean showDiplomes() {
		return session().objectForKey(EDTExamenMenu.SHOW_DIPLOME) != null
				&& ((Boolean) session().objectForKey(EDTExamenMenu.SHOW_DIPLOME)).booleanValue();
	}

	public boolean showDiplomeAvecDomaine() {
		return session().objectForKey(EDTExamenMenu.GRADE_SELECTIONNE) != NullValue;
	}

	public NSMutableArray getListeDiplomeParDomaine() {
		final NSMutableArray listeDiplome = new NSMutableArray();
		final NSMutableArray args = new NSMutableArray();
		final EOGenericRecord gradeSelected = (EOGenericRecord) session().objectForKey(EDTExamenMenu.GRADE_SELECTIONNE);
		args.addObject(EOQualifier.qualifierWithQualifierFormat("fgraCode = %@", new NSArray(gradeSelected.valueForKey("fgraCode"))));
		args.addObject(EOQualifier.qualifierWithQualifierFormat("fdomCode = %@", new NSArray(aDomaine.valueForKey("fdomCode"))));
		if (gradeSelected.classDescription().entityName().equals("ScolFormationGrade")) {
			args.addObject(new EONotQualifier(EOQualifier.qualifierWithQualifierFormat("fdipType = %@", new NSArray("C"))));
		}
		else {
			args.addObject(EOQualifier.qualifierWithQualifierFormat("fdipType = %@", new NSArray("C")));
		}
		final NSMutableArray sort = new NSMutableArray();
		sort.addObject(EOSortOrdering.sortOrderingWithKey("fdipLibelle", EOSortOrdering.CompareAscending));
		listeDiplome.addObjectsFromArray(criApp.dataBus().fetchArray(localEContext(), "ScolFormationDiplome", new EOAndQualifier(args), sort));
		EOSortOrdering.sortArrayUsingKeyOrderArray(listeDiplome, sort);
		return listeDiplome;
	}

	private void initListeDommaine() {
		listeDomaine = new NSMutableArray();
		final NSMutableArray args = new NSMutableArray();
		args.addObject(EOQualifier.qualifierWithQualifierFormat("fdomValidite = %@", new NSArray("O")));
		final NSMutableArray sort = new NSMutableArray();
		sort.addObject(EOSortOrdering.sortOrderingWithKey("fdomLibelle", EOSortOrdering.CompareAscending));
		final EOGenericRecord gradeSelected = (EOGenericRecord) session().objectForKey(EDTExamenMenu.GRADE_SELECTIONNE);
		if (gradeSelected.classDescription().entityName().equals("ScolFormationGrade")) {
			EDTExamenMenu.insertIntoIfNotIn(listeDomaine,
					criApp.dataBus().fetchArray(localEContext(), "ScolFormationDomaine", new EOAndQualifier(args), sort), new NSArray("fdomCode"));
		}
		else {
			EDTExamenMenu
					.insertIntoIfNotIn(listeDomaine,
							criApp.dataBus().fetchArray(localEContext(), "ScolFormationDepartement", new EOAndQualifier(args), sort), new NSArray(
									"fdomCode"));
		}
		EOSortOrdering.sortArrayUsingKeyOrderArray(listeDomaine, sort);
	}

	public String nameGradeSelected() {
		return (String) ((EOGenericRecord) session().objectForKey(EDTExamenMenu.GRADE_SELECTIONNE)).valueForKey("fgraLibelle");
	}

	// ***************************************************
	// FONCTION POUR LES DIPLOMES (domaine selectionné)
	// ***************************************************

	public boolean showDiplomeAvecGrade() {
		return session().objectForKey(EDTExamenMenu.DOMAINE_SELECTIONNE) != NullValue;
	}

	public NSMutableArray getListeDiplomeParGrade() {
		final NSMutableArray listeDiplome = new NSMutableArray();
		final NSMutableArray args = new NSMutableArray();
		final EOGenericRecord domaineSelected = (EOGenericRecord) session().objectForKey(EDTExamenMenu.DOMAINE_SELECTIONNE);
		args.addObject(EOQualifier.qualifierWithQualifierFormat("fdomCode = %@", new NSArray(domaineSelected.valueForKey("fdomCode"))));
		args.addObject(EOQualifier.qualifierWithQualifierFormat("fgraCode = %@", new NSArray(aGrade.valueForKey("fgraCode"))));
		if (domaineSelected.classDescription().entityName().equals("ScolFormationDomaine")) {
			args.addObject(new EONotQualifier(EOQualifier.qualifierWithQualifierFormat("fdipType = %@", new NSArray("C"))));
		}
		else {
			args.addObject(EOQualifier.qualifierWithQualifierFormat("fdipType = %@", new NSArray("C")));
		}
		final NSMutableArray sort = new NSMutableArray();
		sort.addObject(EOSortOrdering.sortOrderingWithKey("fdipLibelle", EOSortOrdering.CompareAscending));
		listeDiplome.addObjectsFromArray(criApp.dataBus().fetchArray(localEContext(), "ScolFormationDiplome", new EOAndQualifier(args), sort));
		EOSortOrdering.sortArrayUsingKeyOrderArray(listeDiplome, sort);
		return listeDiplome;
	}

	private void initListeGrade() {
		listeGrade = new NSMutableArray();
		final NSMutableArray args = new NSMutableArray();
		args.addObject(EOQualifier.qualifierWithQualifierFormat("fgraValidite = %@", new NSArray("O")));
		final NSMutableArray sort = new NSMutableArray();
		sort.addObject(EOSortOrdering.sortOrderingWithKey("fgraCodage", EOSortOrdering.CompareAscending));
		final EOGenericRecord domaineSelected = (EOGenericRecord) session().objectForKey(EDTExamenMenu.DOMAINE_SELECTIONNE);
		if (domaineSelected.classDescription().entityName().equals("ScolFormationDomaine")) {
			EDTExamenMenu.insertIntoIfNotIn(listeGrade,
					criApp.dataBus().fetchArray(localEContext(), "ScolFormationGrade", new EOAndQualifier(args), sort), new NSArray("fgraCode"));
		}
		else {
			EDTExamenMenu.insertIntoIfNotIn(listeGrade,
					criApp.dataBus().fetchArray(localEContext(), "ScolFormationFiliere", new EOAndQualifier(args), sort), new NSArray("fgraCode"));
		}
		EOSortOrdering.sortArrayUsingKeyOrderArray(listeGrade, sort);
	}

	public String nameDomaineSelected() {
		return (String) ((EOGenericRecord) session().objectForKey(EDTExamenMenu.DOMAINE_SELECTIONNE)).valueForKey("fdomLibelle");
	}

	// ***************************************************
	// FONCTION POUR LES PARCOURS
	// ***************************************************

	public boolean showParcours() {
		return ((String) aDiplome.valueForKey("fdipCode")).equals(diplomeSelected);
	}

	public WOComponent afficheParcoursDiplomeSelectionne() {
		if (aDiplome != null) {
			initParcours();
			diplomeSelected = (String) aDiplome.valueForKey("fdipCode");
		}
		return null;
	}

	private void initParcours() {
		listeParcours = new NSMutableArray();
		final NSMutableArray args = new NSMutableArray();
		args.addObject(EOQualifier.qualifierWithQualifierFormat("mparValidite = %@", new NSArray("O")));
		args.addObject(EOQualifier.qualifierWithQualifierFormat("scolFormationSpecialisation.fdipCode = %@",
				new NSArray(aDiplome.valueForKey("fdipCode"))));
		final NSMutableArray sort = new NSMutableArray();
		sort.addObject(EOSortOrdering.sortOrderingWithKey("mparLibelle", EOSortOrdering.CompareAscending));
		listeParcours.addObjectsFromArray(criApp.dataBus().fetchArray(localEContext(), "ScolMaquetteParcours", new EOAndQualifier(args), sort));
		EOSortOrdering.sortArrayUsingKeyOrderArray(listeParcours, sort);
	}

	public String baliseDomaineAnchor() {
		return "<a name='" + aDomaine.valueForKey("fdomCode") + "'></a>";
	}

	public String baliseGradeAnchor() {
		return "<a name='" + aGrade.valueForKey("fgraCode") + "'></a>";
	}

	public String classItemDiplome() {
		if (showParcours()) {
			return "menuItemSelected";
		}
		return "menuItem";
	}

	public boolean isLastSemestre() {
		return indexRepartSemestre == aParcours.scolMaquetteRepartitionSems(getAnneeScolEnCours()).count() - 1;
	}

	public WOComponent selectionSemestre() {
		titrePlanning = new String();
		session().setObjectForKey(((EOGenericRecord) aRepartSemestre.valueForKey("scolMaquetteSemestre")), "semestreSelected");
		if (showDiplomeAvecGrade()) {
			titrePlanning = "<B>" + ((EOGenericRecord) session().objectForKey(EDTExamenMenu.DOMAINE_SELECTIONNE)).valueForKey("fdomLibelle") + " - "
					+ aGrade.valueForKey("fgraLibelle") + " <br> " + aDiplome.valueForKey("fdipMention")
					+ ((aDiplome.valueForKey("fdipSpecialite") != null) ? " : " + aDiplome.valueForKey("fdipSpecialite") + "<br>" : " <br> ")
					+ aParcours.mparLibelle() + "</B><br>" + "Semestre : "
					+ ((EOGenericRecord) aRepartSemestre.valueForKey("scolMaquetteSemestre")).valueForKey("msemOrdre");
		}
		else {
			titrePlanning = "<B>" + ((EOGenericRecord) session().objectForKey(EDTExamenMenu.GRADE_SELECTIONNE)).valueForKey("fgraLibelle") + " - "
					+ aDomaine.valueForKey("fdomLibelle") + " <br> " + aDiplome.valueForKey("fdipMention")
					+ ((aDiplome.valueForKey("fdipSpecialite") != null) ? " : " + aDiplome.valueForKey("fdipSpecialite") + "<br>" : " <br> ")
					+ aParcours.mparLibelle() + "</B><br>" + "Semestre : "
					+ ((EOGenericRecord) aRepartSemestre.valueForKey("scolMaquetteSemestre")).valueForKey("msemOrdre");
		}

		initListeAnnee();
		anneeSelectionne = getAnneeScolEnCours();
		if (anneeSelectionne == null) {
			anneeSelectionne = new Integer((new GregorianCalendar()).get(Calendar.YEAR));
		}
		session().setObjectForKey(Boolean.FALSE, EDTExamenMenu.SHOW_DIPLOME);
		session().setObjectForKey(Boolean.TRUE, EDTExamenMenu.SHOW_PLANNING);
		initListeSemaine();
		initPlanning();
		return null;
	}

	public String classSemestreSelected() {
		if (session().objectForKey("semestreSelected") != null
				&& session().objectForKey("semestreSelected").equals(((EOGenericRecord) aRepartSemestre.valueForKey("scolMaquetteSemestre")))) {
			return "menuItemSelected";
		}
		return "menuItem";
	}

	public NSArray listeRepartSemestre() {
		final NSMutableArray tmp = new NSMutableArray();
		tmp.addObjectsFromArray(aParcours.scolMaquetteRepartitionSems(getAnneeScolEnCours()));
		final NSMutableArray sort = new NSMutableArray();
		sort.addObject(EOSortOrdering.sortOrderingWithKey("scolMaquetteSemestre.msemOrdre", EOSortOrdering.CompareAscending));
		EOSortOrdering.sortArrayUsingKeyOrderArray(tmp, sort);
		return tmp;
	}

	protected void initPlanning() {
		initListeRepartUE();
		session().setObjectForKey(responder, AffichePlanning.RESPONDER);
		session().setObjectForKey(listeExam(), AffichePlanning.LISTE_OBJET);
		session().setObjectForKey(new Boolean(true), "refreshComposant");
	}

	// ************************************
	// Fonction pour les semaines des Semestres et les UE
	// ************************************

	private void initListeSemaine() {
		LRLog.trace(null);
		listeSemaine = new NSMutableArray();
		final EOGenericRecord sem = (EOGenericRecord) session().objectForKey("semestreSelected");
		int debut = (new GregorianCalendar()).getMinimum(Calendar.WEEK_OF_YEAR);
		if (sem.valueForKey("msemDateDebut") != null) {
			debut = (new Jour((NSTimestamp) sem.valueForKey("msemDateDebut"))).get(Calendar.WEEK_OF_YEAR);
		}
		int fin = (new GregorianCalendar()).getMaximum(Calendar.WEEK_OF_YEAR);
		// année suivante...donc +1
		if (sem.valueForKey("msemDateFin") != null) {
			fin = (new Jour((NSTimestamp) sem.valueForKey("msemDateFin"))).get(Calendar.WEEK_OF_YEAR + 1);
		}
		if (debut > fin) {
			for (int i = fin; i <= debut; i++) {
				listeSemaine.addObject(new Integer(i));
			}
		}
		else {

			for (int i = debut; i <= fin; i++) {
				listeSemaine.addObject(new Integer(i));
			}
		}
	}

	private void initListeRepartUE() {
		listeRepartUE = new NSMutableArray();
		final NSMutableArray args = new NSMutableArray();
		args.addObject(EOQualifier.qualifierWithQualifierFormat("scolMaquetteSemestre = %@", new NSArray(session().objectForKey("semestreSelected"))));
		final NSMutableArray sort = new NSMutableArray();
		sort.addObject(EOSortOrdering.sortOrderingWithKey("scolMaquetteUe.mueLibelle", EOSortOrdering.CompareAscending));
		listeRepartUE.addObjectsFromArray(criApp.dataBus().fetchArray(localEContext(), "ScolMaquetteRepartitionUe", new EOAndQualifier(args), sort,
				false));
		EOSortOrdering.sortArrayUsingKeyOrderArray(listeRepartUE, sort);
	}

	private NSArray getListeExamForEC(final Number mecKey) {
		final NSMutableArray tmp = new NSMutableArray();
		final NSMutableArray args = new NSMutableArray();
		args.addObject(EOQualifier.qualifierWithQualifierFormat("mecKey = %@", new NSArray(mecKey)));
		final NSMutableArray sort = new NSMutableArray();
		sort.addObject(EOSortOrdering.sortOrderingWithKey("eentLibelle", EOSortOrdering.CompareAscending));
		tmp.addObjectsFromArray(criApp.dataBus().fetchArray(localEContext(), "ScolExamenEntete", new EOAndQualifier(args), sort, false));
		EOSortOrdering.sortArrayUsingKeyOrderArray(tmp, sort);
		return tmp;
	}

	private NSArray getListeExamForUE(final Number mueKey) {
		final NSMutableArray tmp = new NSMutableArray();
		final NSMutableArray tmp2 = new NSMutableArray();
		final NSMutableArray args = new NSMutableArray();
		args.addObject(EOQualifier.qualifierWithQualifierFormat("mueKey = %@", new NSArray(mueKey)));
		tmp.addObjectsFromArray(criApp.dataBus().fetchArray(localEContext(), "ScolMaquetteRepartitionEc", new EOAndQualifier(args), null, false));
		for (int i = 0; i < tmp.count(); i++) {
			final EOGenericRecord repart = (EOGenericRecord) tmp.objectAtIndex(i);
			tmp2.addObjectsFromArray(getListeExamForEC((Number) repart.valueForKey("mecKey")));
		}
		return tmp2;
	}

	private NSArray getListeExamForSemestre(final Number msemKey) {
		final NSMutableArray tmp = new NSMutableArray();
		final NSMutableArray tmp2 = new NSMutableArray();
		final NSMutableArray args = new NSMutableArray();
		args.addObject(EOQualifier.qualifierWithQualifierFormat("msemKey = %@", new NSArray(msemKey)));
		tmp.addObjectsFromArray(criApp.dataBus().fetchArray(localEContext(), "ScolMaquetteRepartitionUe", new EOAndQualifier(args), null, false));
		for (int i = 0; i < tmp.count(); i++) {
			final EOGenericRecord repart = (EOGenericRecord) tmp.objectAtIndex(i);
			tmp2.addObjectsFromArray(getListeExamForUE((Number) repart.valueForKey("mueKey")));
		}
		return tmp2;
	}

	public NSArray listeExam() {
		if (selectedUe == null) {
			return getListeExamForSemestre((Number) ((EOGenericRecord) session().objectForKey("semestreSelected")).valueForKey("msemKey"));
		}
		return getListeExamForUE((Number) selectedUe.valueForKey("mueKey"));
	}

	// **************************************
	// Fonction implementer pour le planning
	// **************************************

	public WOComponent refresh() {
		initPlanning();
		return null;
	}

	class Responder implements AffichePlanningResponder {

		/**
		 * 
		 */
		public Responder() {
			super();
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see AffichePlanningResponder#goReservation()
		 */
		public WOComponent goReservation() {
			return null;
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see AffichePlanningResponder#nbObjetDispoForDayAndTime(Heure)
		 */
		public String nbObjetDispoForDayAndTime(final Heure aDay) {
			String affichage = "";

			for (int i = 0; i < listeResa.count(); i++) {
				final EDTObject resaDate = (EDTObject) listeResa.objectAtIndex(i);
				final NSTimestamp debut = resaDate.dateDebut();
				final NSTimestamp fin = resaDate.dateFin();
				if (debut != null && fin != null && debut.before(aDay.fin()) && fin.after(aDay.debut())) {
					session().setObjectForKey(resaDate, OBJET_RESA);
					affichage = resaDate.sujetMini();
					if (affichage == null) {
						affichage = "";
					}
					if (affichage != null && affichage.length() > 30) {
						affichage = Utils.cleanCut(affichage, 27) + "...";
					}
					return affichage;
				}
			}
			return "";
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see AffichePlanningResponder#initPlanning(com.webobjects.foundation.NSMutableArray)
		 */
		public int initPlanning(final NSMutableArray listeObjetCle) {
			final NSMutableArray args = new NSMutableArray();
			final NSArray tmp = (NSArray) listeObjetCle.valueForKey("eentKey");
			for (int i = 0; i < tmp.count(); i++) {
				args.addObject(EOQualifier.qualifierWithQualifierFormat("eentKey = %@", new NSArray(tmp.objectAtIndex(i))));
			}
			if (args.count() == 0) {
				args.addObject(EOQualifier.qualifierWithQualifierFormat("eentKey = %@", new NSArray(new Integer(0))));
			}
			final NSArray tmp2 = criApp.dataBus().fetchArray(localEContext(), "ResaExamen", new EOOrQualifier(args), null);
			args.removeAllObjects();
			for (int i = 0; i < tmp2.count(); i++) {
				args.addObject(EOQualifier.qualifierWithQualifierFormat("resaKey = %@",
						new NSArray(((EOGenericRecord) tmp2.objectAtIndex(i)).valueForKey("resaKey"))));
			}
			if (args.count() == 0) {
				args.addObject(EOQualifier.qualifierWithQualifierFormat("resaKey = %@", new NSArray(new Integer(0))));
			}
			theQualifier = new EOOrQualifier(args);
			return 0;
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see AffichePlanningResponder#initPlanning(java.lang.String)
		 */
		public int initPlanning(final String typeCode) {
			return 0;
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see AffichePlanningResponder#couleurTR()
		 */
		public String couleurTR() {
			final Number resaOrdre = ((EDTObject) session().objectForKey(OBJET_RESA)).key();
			if (((Session) session()).getCouleurResa().objectForKey(resaOrdre) == null) {
				final String Rouge = Integer.toHexString((new Double(Math.random() * 50)).intValue() + 200);
				final String Vert = Integer.toHexString((new Double(Math.random() * 40)).intValue() + 200);
				final String Bleu = Integer.toHexString((new Double(Math.random() * 40)).intValue() + 200);
				((Session) session()).getCouleurResa().setObjectForKey("#" + Rouge + Vert + Bleu, resaOrdre);
			}
			return (String) ((Session) session()).getCouleurResa().objectForKey(resaOrdre);
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see AffichePlanningResponder#initListeResa(com.webobjects.foundation.NSTimestamp, com.webobjects.foundation.NSTimestamp)
		 */
		public void initListeResa(final NSTimestamp debut, final NSTimestamp fin) {
			listeResa = new NSMutableArray();
			final NSMutableArray tmp = new NSMutableArray();
			final NSMutableArray args = new NSMutableArray();
			final NSMutableArray args1 = new NSMutableArray();
			final NSMutableArray args2 = new NSMutableArray();
			final NSMutableArray args3 = new NSMutableArray();
			final NSMutableArray args4 = new NSMutableArray();
			args1.addObject(EOQualifier.qualifierWithQualifierFormat("dateDeb >= %@", new NSArray(debut)));
			args1.addObject(EOQualifier.qualifierWithQualifierFormat("dateFin <=  %@", new NSArray(fin)));
			args2.addObject(EOQualifier.qualifierWithQualifierFormat("dateDeb >= %@", new NSArray(debut)));
			args2.addObject(EOQualifier.qualifierWithQualifierFormat("dateFin >  %@", new NSArray(fin)));
			args3.addObject(EOQualifier.qualifierWithQualifierFormat("dateDeb < %@", new NSArray(debut)));
			args3.addObject(EOQualifier.qualifierWithQualifierFormat("dateFin <=  %@", new NSArray(fin)));
			args4.addObject(new EOAndQualifier(args1));
			args4.addObject(new EOAndQualifier(args2));
			args4.addObject(new EOAndQualifier(args3));
			args.addObject(new EOOrQualifier(args4));
			args.addObject(theQualifier);
			LRLog.trace("theQualifier = " + (new EOAndQualifier(args)));
			LRLog.trace("listeResa = " + listeResa);
			tmp.addObjectsFromArray(criApp.dataBus().fetchArray(localEContext(), Periodicite.ENTITY_NAME, new EOAndQualifier(args), null));

			for (int i = 0; i < tmp.count(); i++) {
				final Periodicite objet = (Periodicite) tmp.objectAtIndex(i);
				final EDTObject obj = new EDTObject(criApp.dataBus());
				obj.initObjet(objet, EDTObject.TYPE_PERIODICITE);
				listeResa.addObject(obj);
			}
			LRLog.trace("listeResa = " + listeResa);
		}

		public String title1() {
			if (session().objectForKey(OBJET_RESA) != NullValue) {
				final EDTObject resaDate = (EDTObject) session().objectForKey(OBJET_RESA);
				final NSTimestampFormatter formatJour = new NSTimestampFormatter("%d / %m / %Y  à  %H : %M");
				if (resaDate != null) {
					return "Du " + DateCtrl.dateToString(resaDate.dateDebut(), formatJour.pattern()) + " <BR>Au "
							+ DateCtrl.dateToString(resaDate.dateFin(), formatJour.pattern());
				}
			}
			return null;
		}

		public String title2() {
			String affichage = "";
			final EDTObject resaDate = (EDTObject) session().objectForKey(OBJET_RESA);
			if (resaDate != null) {
				final String sujet = resaDate.sujetMini();
				if (resaDate != null && sujet != null) {
					return sujet;
				}
				final NSArray tmp = (NSArray) ((Periodicite) resaDate.getObject()).reservation().valueForKey(Reservation.TOS_RESA_EXAM_KEY);
				affichage += (String) ((EOGenericRecord) tmp.objectAtIndex(0)).valueForKey("libelleEC");
			}
			return affichage;
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see AffichePlanningResponder#getObjetForIndex(int)
		 */
		public EDTObject getObjetForIndex(final int index) {
			return null;
		}

		public NSArray getListeResaObjet(final NSTimestamp debut, final NSTimestamp fin) {
			return null;
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see AffichePlanningResponder#motifReservation()
		 */
		public String motifReservation(final int maxCar) {
			return null;
		}
	}

	/**
	 * @return
	 */
	public NSTimestamp getDateDebut() {
		return dateDebut.toNSTimestamp();
	}

	/**
	 * @param jour
	 */
	public void setDateDebut(final NSTimestamp jour) {
		dateDebut = new Jour(jour);
	}

	public boolean avecMention() {
		final String mention = (String) aDiplome.valueForKey("fdipMention");
		return !(mention == null || "".equals(mention) || " ".equals(mention));
	}

}
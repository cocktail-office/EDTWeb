package org.cocktail.edtweb.server.components;
// Generated by the WOLips Core at Mon Jul 19 10:13:43 CEST 2004

import org.cocktail.edtweb.server.Application;
import org.cocktail.edtweb.server.Session;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;

import fr.univlr.cri.webapp.CRIWebComponent;
import fr.univlr.cri.webapp.LRUserInfo;
import fr.univlr.cri.webext.CRILogin;
import fr.univlr.cri.webext.CRILoginResponder;

public class EDTLogin extends CRIWebComponent {
	/**
	 * 
	 */
	private static final long serialVersionUID = -5171654907981889405L;
	public static final String TYPE_IDENTIFICATION = "typeIdentification";
	public static final int IDENTIFICATION_INDIVIDU = 0;
	public static final int IDENTIFICATION_OBJET = 1;
	public LoginResponder loginRespondeur;

	public String Erreur;

	public EDTLogin(final WOContext context) {
		super(context);
		loginRespondeur = new LoginResponder();
		Erreur = null;
	}

	class LoginResponder implements CRILoginResponder {

		public LoginResponder() {
			super();
		}

		public WOComponent loginAccepted(final CRILogin arg0) {
			criSession().setConnectedUserInfo(arg0.loggedUserInfo());
			action();
			return null;
		}

		public boolean acceptLoginName(final String arg0) {
			return criApp.acceptLoginName(arg0);
		}

		public boolean acceptEmptyPassword() {
			return false;
		}

		public String getRootPassword() {
			return criApp.getRootPassword();
		}
	}

	public boolean action() {
		try {
			int typeId = ((Integer) session().objectForKey(TYPE_IDENTIFICATION)).intValue();
			switch (typeId) {
				case IDENTIFICATION_INDIVIDU:
					if (superUser((Application) application(), criSession().connectedUserInfo().login())) {
						((Session) session()).setAffichageEnCours(Main.AFFICHE_CHOIX_INDIVIDU);
						session().setObjectForKey(Boolean.TRUE, EDTIndividuChoix.REFRESH);
					}
					else {
						((Session) session()).setAffichageEnCours(Main.AFFICHE_INDIVIDU);
					}
					session().setObjectForKey(new Boolean(true), "refresh");
					break;
				case IDENTIFICATION_OBJET:
					if (criSession().connectedUserInfo().userStatus() != LRUserInfo.STATUS_ETUDIANT) {
						((Session) session()).setAffichageEnCours(Main.AFFICHE_OBJET);
					}
					else {
						((Session) session()).setAffichageEnCours(Main.AFFICHE_RIEN);
					}
					session().setObjectForKey(new Boolean(true), "refresh");
					break;

				default:
					break;
			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return true;
	}

	public String nomIdentification() {
		int typeId = ((Integer) session().objectForKey(TYPE_IDENTIFICATION)).intValue();
		switch (typeId) {
			case IDENTIFICATION_INDIVIDU:
				return "Identification pour la consultation de votre emploi du temps :";
			case IDENTIFICATION_OBJET:
				return "Identification pour la reservation d'objets :";

			default:
				break;
		}
		return "Identification";
	}

	public static boolean superUser(final Application app, final String login) {
		return app.loginAdmin().indexOf(login) >= 0;
	}
}
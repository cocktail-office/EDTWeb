package org.cocktail.edtweb.server.components;
// Generated by the WOLips Core at Thu Aug 19 09:08:12 CEST 2004

import java.util.Calendar;
import java.util.GregorianCalendar;

import org.cocktail.edtweb.server.Jour;
import org.cocktail.edtweb.server.metier.Periodicite;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WODisplayGroup;
import com.webobjects.appserver.WOResponse;
import com.webobjects.eocontrol.EOAndQualifier;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOGenericRecord;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.eocontrol.EOSortOrdering;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSRange;
import com.webobjects.foundation.NSTimestamp;

import fr.univlr.cri.webapp.CRIWebComponent;
import fr.univlr.cri.webapp.LRLog;
import fr.univlr.cri.webapp.LRUserInfo;
import fr.univlr.cri.webapp.LRUserInfoDB;

public class EDTReunion extends CRIWebComponent {
	private static final long serialVersionUID = -635491902455081962L;
	public static int TRI_SALLE = 1;
	public static int TRI_JOUR = 2;
	public static int TRI_OBJET = 3;
	public static String TLOC_CODE = "R";
	public static String REFRESH = "refreshReunion";
	public WODisplayGroup periodiciteDisplayGroup;

	/** @TypeInfo Periodicite */
	public Periodicite aPeriodicite;
	public Jour premierJourSemaineSelectionne;
	public Jour dernierJourSemaineSelectionne;
	public int noSemaineSelectionne;
	public Integer anneeSelectionne;
	private int noSemaine;
	private int tri; // le tri utiliser...

	public NSMutableArray listeAnnee;
	public Integer uneAnnee;
	public LRUserInfo participant;

	private int tousLesParticipant;
	public boolean afficheSuite;

	public EDTReunion(final WOContext context) {
		super(context);
	}

	public EOEditingContext localEContext() {
		return session().defaultEditingContext();
	}

	public void initDisplayGroupe() {
		setNoSemaine(noSemaineSelectionne);
		tri = 0;
		final NSMutableArray args = new NSMutableArray();
		if (session().objectForKey(EDTReunionMenu.BAT_SELECTED) != NullValue) {
			args.addObject(EOQualifier.qualifierWithQualifierFormat("reservation.tosResaSalles.toSalles.toBatiment = %@", new NSArray(session()
					.objectForKey(EDTReunionMenu.BAT_SELECTED))));
		}
		args.addObject(EOQualifier.qualifierWithQualifierFormat("dateDeb >= %@", new NSArray(premierJourSemaineSelectionne.debutDeJournnee())));
		args.addObject(EOQualifier.qualifierWithQualifierFormat("dateFin <= %@", new NSArray(dernierJourSemaineSelectionne.finDeJournnee())));
		final NSArray tmp = sortClassique();
		final NSMutableArray sort = new NSMutableArray();
		for (int i = 0; i < tmp.count(); i++) {
			sort.addObject(EOSortOrdering.sortOrderingWithKey((String) tmp.objectAtIndex(i), EOSortOrdering.CompareAscending));
		}
		LRLog.trace("qualifier = " + (new EOAndQualifier(args)));
		periodiciteDisplayGroup.setNumberOfObjectsPerBatch(10);
		criApp.dataBus().fetchTable(periodiciteDisplayGroup, new EOAndQualifier(args), sort, true);
		tousLesParticipant = 0;
	}

	private void initListeAnnee() {
		final int anneeCourante = (new GregorianCalendar()).get(Calendar.YEAR);
		listeAnnee = new NSMutableArray();
		for (int i = anneeCourante + 1; i >= anneeCourante - 3; i--) {
			listeAnnee.addObject(new Integer(i));
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.webobjects.appserver.WOComponent#appendToResponse(com.webobjects.appserver.WOResponse, com.webobjects.appserver.WOContext)
	 */
	public void appendToResponse(final WOResponse arg0, final WOContext arg1) {
		if (session().objectForKey(REFRESH) != null && ((Boolean) session().objectForKey(REFRESH)).booleanValue()) {
			initListeAnnee();
			anneeSelectionne = new Integer((new GregorianCalendar()).get(Calendar.YEAR));
			setNoSemaineSelectionne((new GregorianCalendar()).get(Calendar.WEEK_OF_YEAR));
			noSemaine = noSemaineSelectionne;
			initDisplayGroupe();
			session().setObjectForKey(new Boolean(false), REFRESH);
		}
		super.appendToResponse(arg0, arg1);
	}

	public boolean showPlanning() {
		return (session().objectForKey(EDTReunionMenu.SHOW_PLANNING) != null && ((Boolean) session().objectForKey(EDTReunionMenu.SHOW_PLANNING))
				.booleanValue());
	}

	private void setNoSemaineSelectionne(final int noSemaine) {
		noSemaineSelectionne = noSemaine;
		final GregorianCalendar tmp = new GregorianCalendar();
		// Lundi est le premier jour de la semaine
		tmp.setFirstDayOfWeek(Calendar.MONDAY);
		// La première semaine est celle qui contient
		// le premier jeudi de Janvier
		tmp.setMinimalDaysInFirstWeek(4);
		tmp.set(Calendar.YEAR, anneeSelectionne.intValue());
		tmp.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
		tmp.set(Calendar.WEEK_OF_YEAR, noSemaine);
		tmp.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
		// tmp.set(Calendar.HOUR_OF_DAY,0);
		// tmp.set(Calendar.MINUTE,0);
		// tmp.set(Calendar.SECOND,1);
		premierJourSemaineSelectionne = new Jour(tmp);
		premierJourSemaineSelectionne.initLesHeures(0, 24);
		final GregorianCalendar tmp2 = new GregorianCalendar();
		// Lundi est le premier jour de la semaine
		tmp2.setFirstDayOfWeek(Calendar.MONDAY);
		// La première semaine est celle qui contient
		// le premier jeudi de Janvier
		tmp2.setMinimalDaysInFirstWeek(4);
		tmp2.set(Calendar.YEAR, anneeSelectionne.intValue());
		tmp2.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);
		tmp2.set(Calendar.WEEK_OF_YEAR, noSemaine);
		tmp2.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);
		// tmp2.set(Calendar.HOUR_OF_DAY,23);
		// tmp2.set(Calendar.MINUTE,59);
		// tmp2.set(Calendar.SECOND,59);
		dernierJourSemaineSelectionne = new Jour(tmp2);
		dernierJourSemaineSelectionne.initLesHeures(0, 24);
	}

	/**
	 * @return
	 */
	public int getNoSemaine() {
		return noSemaine;
	}

	/**
	 * @param i
	 */
	public void setNoSemaine(final int i) {
		noSemaine = i + 1;
	}

	public int fontSizeSemaine() {
		final GregorianCalendar now = new GregorianCalendar();
		// Lundi est le premier jour de la semaine
		now.setFirstDayOfWeek(Calendar.MONDAY);
		// La première semaine est celle qui contient
		// le premier jeudi de Janvier
		now.setMinimalDaysInFirstWeek(4);
		if (getNoSemaine() == premierJourSemaineSelectionne.get(Calendar.WEEK_OF_YEAR)) {
			return 5;
		}
		if (getNoSemaine() == premierJourSemaineSelectionne.get(Calendar.WEEK_OF_YEAR) - 1
				|| getNoSemaine() == premierJourSemaineSelectionne.get(Calendar.WEEK_OF_YEAR) + 1) {
			return 3;
		}
		if (getNoSemaine() == premierJourSemaineSelectionne.get(Calendar.WEEK_OF_YEAR) - 2
				|| getNoSemaine() == premierJourSemaineSelectionne.get(Calendar.WEEK_OF_YEAR) + 2) {
			return 2;
		}
		return 1;
	}

	public String fontColorSemaine() {
		final GregorianCalendar now = new GregorianCalendar();
		// Lundi est le premier jour de la semaine
		now.setFirstDayOfWeek(Calendar.MONDAY);
		// La première semaine est celle qui contient
		// le premier jeudi de Janvier
		now.setMinimalDaysInFirstWeek(4);
		if (getNoSemaine() == now.get(Calendar.WEEK_OF_YEAR) && anneeSelectionne.intValue() == now.get(Calendar.YEAR)) {
			return "#ff0000";
		}
		return null;
	}

	public WOComponent selectionNoSemaine() {
		setNoSemaineSelectionne(getNoSemaine());
		initDisplayGroupe();
		return null;
	}

	public WOComponent selectAnnee() {
		setNoSemaineSelectionne(1);
		initDisplayGroupe();
		return null;
	}

	public LRUserInfo getLRUserInfoIndividu(final Number noIndividu) {
		final LRUserInfoDB user = new LRUserInfoDB(criApp.dataBus());
		user.individuForNoIndividu(noIndividu, true);
		return user;
	}

	public String batimentSelectionne() {
		if (session().objectForKey(EDTReunionMenu.BAT_SELECTED) != NullValue) {
			return "pour le b&acirc;timent "
					+ (String) ((EOGenericRecord) session().objectForKey(EDTReunionMenu.BAT_SELECTED)).valueForKey("appellation");
		}
		return "pour TOUS LES B&Acirc;TIMENTS";
	}

	public NSArray listeParticipant() {
		final int max = 1;

		final NSMutableArray listeParticipant = new NSMutableArray();
		final EOQualifier qualifier = EOQualifier.qualifierWithQualifierFormat("resaKey = %@", new NSArray(aPeriodicite.reservation().resaKeyReadOnly()));
		final NSArray tmp = criApp.dataBus().fetchArray(localEContext(), "Occupant", qualifier, null);

		for (int i = 0; i < tmp.count(); i++) {
			listeParticipant.addObject(getLRUserInfoIndividu((Number) ((EOGenericRecord) tmp.objectAtIndex(i)).valueForKey("noIndividu")));
		}
		final NSArray sort = new NSArray(EOSortOrdering.sortOrderingWithKey("nomEtPrenom", EOSortOrdering.CompareAscending));
		EOSortOrdering.sortArrayUsingKeyOrderArray(listeParticipant, sort);

		if (tousLesParticipant == ((Number) aPeriodicite.reservation().resaKeyReadOnly()).intValue() || max >= tmp.count()) {
			afficheSuite = false;
			return listeParticipant;
		}
		else {
			afficheSuite = true;
			return listeParticipant.subarrayWithRange(new NSRange(0, max));
		}
	}

	public String mailto() {
		return "mailto:" + participant.email();
	}

	public String titleMailto() {
		return "Envoyer un email à " + participant.nomEtPrenom();
	}

	public WOComponent voirTousLesParticipants() {
		tousLesParticipant = ((Number) aPeriodicite.reservation().resaKeyReadOnly()).intValue();
		return null;
	}

	public NSTimestamp dateDebut() {
		return new NSTimestamp(((NSTimestamp) aPeriodicite.valueForKey("dateDeb")).getTime());// ,TimeZone.getTimeZone(criApp.config().stringForKey("TIME_ZONE")));
	}

	public NSTimestamp dateFin() {
		return new NSTimestamp(((NSTimestamp) aPeriodicite.valueForKey("dateFin")).getTime());// ,TimeZone.getTimeZone(criApp.config().stringForKey("TIME_ZONE")));
	}

	public boolean triSalle() {
		return tri == TRI_SALLE;
	}

	public void setTriSalle(final boolean newTriSalle) {
		if (newTriSalle) {
			tri = TRI_SALLE;
		}
	}

	public boolean triJour() {
		return tri == TRI_JOUR;
	}

	public void setTriJour(final boolean newTriJour) {
		if (newTriJour) {
			tri = TRI_JOUR;
		}
	}

	public NSArray sortClassique() {
		final NSMutableArray sort = new NSMutableArray();
		sort.addObject("dateDeb");
		sort.addObject("dateFin");
		return sort;
	}

	public boolean triObjet() {
		return tri == TRI_OBJET;
	}

	public void setTriObjet(final boolean newTriObjet) {
		if (newTriObjet) {
			tri = TRI_OBJET;
		}
	}

}
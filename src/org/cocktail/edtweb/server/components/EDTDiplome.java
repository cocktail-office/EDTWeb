package org.cocktail.edtweb.server.components;
// Generated by the WOLips Core at Fri Sep 03 16:51:17 CEST 2004

import org.cocktail.edtweb.server.Application;
import org.cocktail.edtweb.server.metier.ScolGroupeObjet;

import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WOResponse;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOEnterpriseObject;
import com.webobjects.eocontrol.EOGenericRecord;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.eocontrol.EOSortOrdering;
import com.webobjects.foundation.NSArray;

import fr.univlr.cri.util.GEDDescription;
import fr.univlr.cri.webapp.CRIGedBus;
import fr.univlr.cri.webapp.LRLog;

public class EDTDiplome extends EDTExamen {

	private static final long serialVersionUID = 3074909424714611577L;

	/** @TypeInfo ScolGroupeObjet */
	public EOEnterpriseObject itemGroupeObjet;

	/** @TypeInfo ScolGroupeObjet */
	public ScolGroupeObjet groupeSelected;

	private String urlPdfSelected, urlPdfGrpSelected;

	public EDTDiplome(final WOContext context) {
		super(context);
	}

	public EOEditingContext localEContext() {
		return session().defaultEditingContext();
	}

	protected void initPlanning() {
		setUrlPdfSelected(urlPdfSelected());
		if (groupeSelected != null) {
			setUrlPdfGrpSelected(urlPdfGrpSelected());
		}
	}

	public void appendToResponse(final WOResponse arg0, final WOContext arg1) {
		super.appendToResponse(arg0, arg1);
	}

	public String motCleRecherche() {
		String format = ((Application) application()).formatNomPDF();
		format = format.replaceAll("%S", "" + ((Number) semestreSelected().valueForKey("msemKey")).intValue());
		format = format.replaceAll("%s", "" + noSemaineSelectionne().intValue());
		// GregorianCalendar now = new GregorianCalendar();
		// now.setFirstDayOfWeek(Calendar.MONDAY);
		// now.setMinimalDaysInFirstWeek(4);
		// if (now.get(Calendar.WEEK_OF_YEAR) > noSemaineSelectionne().intValue()) {
		// format = format.replaceAll("%Y", "" + (anneeSelectionne.intValue() + 1));
		// }
		// else {
		// format = format.replaceAll("%Y", "" + anneeSelectionne.intValue());
		// }
		format = format.replaceAll("%Y", "" + anneeSelectionne.intValue());

		return format;
	}

	public String motCleRechercheGrp() {
		String format = ((Application) application()).formatNomPDFGrp();
		format = format.replaceAll("%S", "" + ((Number) semestreSelected().valueForKey("msemKey")).intValue());
		format = format.replaceAll("%s", "" + noSemaineSelectionne().intValue());
		// GregorianCalendar now = new GregorianCalendar();
		// now.setFirstDayOfWeek(Calendar.MONDAY);
		// now.setMinimalDaysInFirstWeek(4);
		// if (now.get(Calendar.WEEK_OF_YEAR) > noSemaineSelectionne().intValue()) {
		// format = format.replaceAll("%Y", "" + (anneeSelectionne.intValue() + 1));
		// }
		// else {
		// format = format.replaceAll("%Y", "" + anneeSelectionne.intValue());
		// }
		format = format.replaceAll("%Y", "" + anneeSelectionne.intValue());
		format = format.replaceAll("%g", "" + groupeSelected.scolGroupeGrp().ggrpKey().intValue());
		return format;
	}

	private EOGenericRecord rechercheCourrier() {
		EOQualifier qual = EOQualifier.qualifierWithQualifierFormat("motClef caseInsensitiveLike %@", new NSArray(motCleRecherche()));
		NSArray a = criApp.dataBus().fetchArray(localEContext(), "EdtGedexport", qual,
				new NSArray(EOSortOrdering.sortOrderingWithKey("dModification", EOSortOrdering.CompareDescending)));
		return (EOGenericRecord) a.lastObject();
	}

	private EOGenericRecord rechercheCourrierGrp() {
		EOQualifier qual = EOQualifier.qualifierWithQualifierFormat("motClef caseInsensitiveLike %@", new NSArray(motCleRechercheGrp()));
		NSArray a = criApp.dataBus().fetchArray(localEContext(), "EdtGedexport", qual,
				new NSArray(EOSortOrdering.sortOrderingWithKey("dModification", EOSortOrdering.CompareDescending)));
		return (EOGenericRecord) a.lastObject();
	}

	private String urlPdfSelected() {
		try {
			EOGenericRecord gedExport = rechercheCourrier();
			LRLog.trace("gedExport =" + gedExport);
			if (gedExport == null) {
				return null;
			}
			Number gedId = (Number) gedExport.valueForKey("docId");
			LRLog.trace("gedId =" + gedId);
			if (gedId == null) {
				return null;
			}
			CRIGedBus bus = criApp.gedBus();
			LRLog.trace("bus =" + bus);
			if (bus == null) {
				return null;
			}
			GEDDescription data = bus.inspectDocumentGED(gedId.intValue());
			LRLog.trace("data =" + data);
			if (data == null) {
				return null;
			}
			LRLog.trace("data.ref =" + data.reference);
			return data.reference;
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	private String urlPdfGrpSelected() {
		try {
			EOGenericRecord gedExport = rechercheCourrierGrp();
			LRLog.trace("gedExport =" + gedExport);
			if (gedExport == null) {
				return null;
			}
			Number gedId = (Number) gedExport.valueForKey("docId");
			LRLog.trace("gedId =" + gedId);
			if (gedId == null) {
				return null;
			}
			CRIGedBus bus = criApp.gedBus();
			LRLog.trace("bus =" + bus);
			if (bus == null) {
				return null;
			}
			GEDDescription data = bus.inspectDocumentGED(gedId.intValue());
			LRLog.trace("data =" + data);
			if (data == null) {
				return null;
			}
			LRLog.trace("data.ref =" + data.reference);
			return data.reference;
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	// private void initListeGroupe(){
	// NSMutableArray args = new NSMutableArray();
	// args.addObject(EOQualifier.qualifierWithQualifierFormat(" = %@", new NSArray()));
	//		
	// }

	/** @TypeInfo ScolMaquetteSemestre */
	public EOEnterpriseObject semestreSelected() {
		EOEnterpriseObject eo = (EOEnterpriseObject) session().objectForKey("semestreSelected");
		if (!((NSArray) eo.valueForKey("tosScolGroupeObjet")).containsObject(groupeSelected)) {
			groupeSelected = null;
		}
		return eo;
	}

	public String getUrlPdfSelected() {
		return urlPdfSelected;
	}

	public void setUrlPdfSelected(String urlPdfSelected) {
		this.urlPdfSelected = urlPdfSelected;
	}

	public String getUrlPdfGrpSelected() {
		return urlPdfGrpSelected;
	}

	public void setUrlPdfGrpSelected(String urlPdfGrpSelected) {
		this.urlPdfGrpSelected = urlPdfGrpSelected;
	}

}
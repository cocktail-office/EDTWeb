package org.cocktail.edtweb.server;
// Generated by the WOLips Core


import org.cocktail.edtweb.server.components.EDTIndividu;
import org.cocktail.edtweb.server.components.EDTIndividuChoix;
import org.cocktail.edtweb.server.components.EDTIndividuPublic;
import org.cocktail.edtweb.server.components.EDTIndividuPublicICal;
import org.cocktail.edtweb.server.components.EDTLogin;
import org.cocktail.edtweb.server.components.EDTObjetMenu;
import org.cocktail.edtweb.server.components.Main;
import org.cocktail.edtweb.server.metier.ResaObjet;

import com.webobjects.appserver.WOActionResults;
import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WORedirect;
import com.webobjects.appserver.WORequest;
import com.webobjects.appserver.WOResponse;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSTimestamp;

import fr.univlr.cri.planning.PartagePlanning;
import fr.univlr.cri.planning.SPOccupation;
import fr.univlr.cri.util.StringCtrl;
import fr.univlr.cri.webapp.CRIWebAction;
import fr.univlr.cri.webapp.LRUserInfoDB;

public class DirectAction extends CRIWebAction {

	public DirectAction(final WORequest aRequest) {
		super(aRequest);
	}

	public WOActionResults servicesAction() {
		return pageWithName("services");
	}

	public WOActionResults defaultAction() {
		try {
			final WORequest aRequest = this.request();

			if (aRequest.formValueKeys().count() == 0) {
				return criSession().getSavedPageWithName("Main");
			}
			else {
				String strParas = (String) aRequest.formValueForKey("login");
				String ical = null;
				String login = null;
				if ((strParas != null) && strParas.indexOf("/") >= 0) {
					final String[] listStr = strParas.split("/");
					for (int i = 0; i < listStr.length; i++) {
						final String arg = listStr[i];
						if (!"".equals(arg) && arg != null) {
							if ("ical".equals(arg.toLowerCase())) {
								ical = "yes";
							}
							else {
								login = arg;
							}
						}
					}
				}
				else {
					login = strParas;
					ical = (String) aRequest.formValueForKey("ical");
				}

				// String agenda = (String) aRequest.formValueForKey("agenda");
				String salle = (String) aRequest.formValueForKey("salle");
				String reunion = (String) aRequest.formValueForKey("reunion");
				String examen = (String) aRequest.formValueForKey("examen");
				String typeObjet = (String) aRequest.formValueForKey("typeobjet");

				if ("1".equals(salle)) {
					return salle();
				}

				if ("1".equals(reunion)) {
					return reunion();
				}

				if ("1".equals(examen)) {
					return examen();
				}

				if (typeObjet != null) {
					return objet(typeObjet);
				}

				// default...
				// if ("1".equals(agenda)) {
				if (login != null) {
					if ("yes".equals(ical)) {
						return agendaPublicIcal(login);
					}
					else {
						return agendaPublic(login);
					}
				}
				else {
					return agendaPrive();
				}
				// }

			}
			// return pageWithName("Main");
		}
		catch (Throwable t) {
			t.printStackTrace();
			return null;
		}
	}

	public WOActionResults agendaPrive() {
		System.out.println("DirectAction:agendaPrive called");
		if (useCasService()) {
			WORedirect page = new WORedirect(context());
			page.session().setObjectForKey(new Integer(EDTLogin.IDENTIFICATION_INDIVIDU), EDTLogin.TYPE_IDENTIFICATION);
			page.setUrl(CRIWebAction.getLoginActionURL(context(), true, null, true, null));
			return page;
		}
		else {
			Main page = (Main) pageWithName("Main");
			((Session) page.session()).setAffichageEnCours(Main.AFFICHE_IDENTIFICATION);
			page.session().setObjectForKey(new Integer(EDTLogin.IDENTIFICATION_INDIVIDU), EDTLogin.TYPE_IDENTIFICATION);
			return page;
		}

	}

	public WOComponent agendaPublic(final String login) {
		System.out.println("DirectAction:agendaPublic called for login <" + login + ">");
		Main page = (Main) pageWithName("Main");
		page.session().setObjectForKey(login, EDTIndividuPublic.LOGIN_EXTERNE);
		((Session) page.session()).setAffichageEnCours(Main.AFFICHE_INDIVIDU_PUBLIC);
		session().setObjectForKey(new Boolean(true), "refresh");// a ajouter
		page.setLogin(login);
		return page;
	}

	public WOComponent agendaPublicIcal(final String login) {
		try {
			System.out.println("DirectAction:agendaPublicIcal called for login <" + login + ">");
			WORedirect page = new WORedirect(context());
			String urlSP = ((Application) page.application()).urlServeurPlanning();
			if (!StringCtrl.isEmpty(urlSP)) {
				// methode Serveur de Planning
				page.setUrl(urlSP + login);
				return page;
			}
			else {
				// methode alternative si pas de serveur de planning...
				session().setObjectForKey(login, EDTIndividuPublic.LOGIN_EXTERNE);
				((Session) session()).setAffichageEnCours(Main.AFFICHE_INDIVIDU_PUBLIC);
				EDTIndividuPublicICal icalPage = (EDTIndividuPublicICal) pageWithName("EDTIndividuPublicICal");
				return icalPage.afficheICal();
			}
		}
		catch (Throwable t) {
			t.printStackTrace();
			return null;
		}
	}

	public WOComponent salle() {
		Main page = (Main) pageWithName("Main");
		((Session) page.session()).setAffichageEnCours(Main.AFFICHE_SALLES);
		return page;
	}

	public WOComponent reunion() {
		Main page = (Main) pageWithName("Main");
		((Session) page.session()).setAffichageEnCours(Main.AFFICHE_REUNION);
		return page;
	}

	public WOComponent examen() {
		Main page = (Main) pageWithName("Main");
		if (((Application) page.application()).useExamens()) {
			((Session) page.session()).setAffichageEnCours(Main.AFFICHE_EXAMEN);
		}
		return page;
	}

	public WOActionResults objet(final String libelleObjet) {
		session().setObjectForKey(libelleObjet, "ObjetLibelle");
		if (useCasService()) {
			WORedirect page = new WORedirect(context());
			page.session().setObjectForKey(new Integer(EDTLogin.IDENTIFICATION_OBJET), EDTLogin.TYPE_IDENTIFICATION);
			page.setUrl(CRIWebAction.getLoginActionURL(context(), true, null, true, null));
			return page;
		}
		else {
			Main page = (Main) pageWithName("Main");
			((Session) page.session()).setAffichageEnCours(Main.AFFICHE_IDENTIFICATION);
			page.session().setObjectForKey(new Integer(EDTLogin.IDENTIFICATION_OBJET), EDTLogin.TYPE_IDENTIFICATION);
			return page;
		}
	}

	public WOActionResults infoForResaAction() {
		WORequest aRequest = this.request();
		String key = (String) aRequest.formValueForKey("objet");
		if (key == null) {
			return pageWithName("Main");
		}
		EDTObject objet = (EDTObject) ((Session) session()).getObjetResa().objectForKey(key);
		session().setObjectForKey(objet, EDTIndividu.OBJET_RESA);
		return pageWithName("AffichageInfoReservation");
	}

	public WOActionResults loginCasSuccessPage(final String netid) {
		String errorMsg = criSession().setConnectedUser(netid);
		if (criSession().connectedUserInfo() != null) {
			if (errorMsg != null) {
				return loginCasFailurePage(errorMsg, null);
			}
		}
		EDTLogin page = (EDTLogin) pageWithName("EDTLogin");
		Object obj = page.session().objectForKey(EDTLogin.TYPE_IDENTIFICATION);
		if (obj == null) {
			page.session().setObjectForKey(new Integer(EDTLogin.IDENTIFICATION_INDIVIDU), EDTLogin.TYPE_IDENTIFICATION);
		}
		page.action();
		switch (((Integer) page.session().objectForKey(EDTLogin.TYPE_IDENTIFICATION)).intValue()) {
		case EDTLogin.IDENTIFICATION_INDIVIDU: {
			Main rePage = (Main) pageWithName("Main");
			if (EDTLogin.superUser((Application) page.application(), criSession().connectedUserInfo().login())) {
				((Session) session()).setAffichageEnCours(Main.AFFICHE_CHOIX_INDIVIDU);
				session().setObjectForKey(Boolean.TRUE, EDTIndividuChoix.REFRESH);
			}
			else {
				((Session) session()).setAffichageEnCours(Main.AFFICHE_INDIVIDU);
			}
			return rePage;
		}
		case EDTLogin.IDENTIFICATION_OBJET: {
			EOQualifier qualifier = null;
			if (session().objectForKey("ObjetLibelle") != null) {
				qualifier = EOQualifier.qualifierWithQualifierFormat(ResaObjet.RO_LIBELLE1_KEY + " caseInsensitiveLike %@", new NSArray("*"
						+ session().objectForKey("ObjetLibelle") + "*"));
				NSArray listObj = criApp.dataBus().fetchArray(session().defaultEditingContext(), ResaObjet.ENTITY_NAME, qualifier, null);
				session().setObjectForKey(listObj.lastObject(), EDTObjetMenu.OBJET_SELECTED);
				session().setObjectForKey(Boolean.TRUE, EDTObjetMenu.SHOW_PLANNING);
			}
			else {
				session().setObjectForKey(Boolean.FALSE, EDTObjetMenu.SHOW_PLANNING);
			}
			Main rePage = (Main) pageWithName("Main");
			((Session) rePage.session()).setAffichageEnCours(Main.AFFICHE_OBJET);

			session().setObjectForKey(new Boolean(true), "refresh");
			return rePage;
		}
		default:
			break;
		}
		return criSession().getSavedPageWithName("Main");
	}

	/**
	 * Pour le serveur de planning.
	 * 
	 * @return Le planning d'un étudiant (cours, td, tp, examens éventuellement selon paramétrage), fonction de son/ses inscription(s) et
	 *         éventuellement de la répartition dans les groupes.
	 */
	public WOActionResults agendaEtudiantPourPeriodeAction() {
		System.out.println("DirectAction:agendaEtudiantPourPeriodeAction called");
		NSDictionary dicoParams = PartagePlanning.dicoParams(request());
		Number noIndividu = (Number) dicoParams.valueForKey("noIndividu");
		NSTimestamp debut = (NSTimestamp) dicoParams.valueForKey("debut");
		NSTimestamp fin = (NSTimestamp) dicoParams.valueForKey("fin");

		LRUserInfoDB lruserinfo = new LRUserInfoDB(criApp.dataBus());
		lruserinfo.individuForNoIndividu(noIndividu, true);
		if (lruserinfo.hasError()) {
			WOResponse resultat = new WOResponse();
			resultat = PartagePlanning.reponsePlanning(new NSArray(), 0, lruserinfo.errorMessage());
			return resultat;
		}

		try {
			NSMutableArray listeResa = new NSMutableArray();
			listeResa.addObjectsFromArray(EDTIndividu.getPlanningEtudiant(criApp.dataBus(), lruserinfo.persId(), debut, fin));
			if (((Application) criApp).useExamens()) {
				listeResa.addObjectsFromArray(EDTIndividu.getPlanningEtudiantExamens(criApp.dataBus(), lruserinfo.persId(), debut, fin));
			}
			NSMutableArray spOccupations = new NSMutableArray();
			for (int i = 0; i < listeResa.count(); i++) {
				EDTObject obj = (EDTObject) listeResa.objectAtIndex(i);
				SPOccupation spOccupation = new SPOccupation(obj.dateDebut(), obj.dateFin(), "SuperPlan", obj.sujetIcal());
				spOccupations.addObject(spOccupation);
			}
			WOResponse resultat = new WOResponse();
			resultat = PartagePlanning.reponsePlanning(spOccupations, 1, null);
			session().terminate();
			return resultat;
		}
		catch (Throwable t) {
			WOResponse resultat = new WOResponse();
			t.printStackTrace();
			resultat = PartagePlanning.reponsePlanning(new NSArray(), 0, "Une erreur est survenue: " + t.getMessage());
			return resultat;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see fr.univlr.cri.webapp.CRIWebAction#loginCasFailurePage(java.lang.String, java.lang.String)
	 */
	public WOActionResults loginCasFailurePage(final String arg0, final String arg1) {
		Main page = (Main) pageWithName("Main");
		return ((Application) page.application()).pageErreur("LoginCasFailure", "Il y a eu un problème avec l'identification !", arg0, arg1,
				this.context());
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see fr.univlr.cri.webapp.CRIWebAction#loginNoCasPage()
	 */
	public WOActionResults loginNoCasPage() {
		Main page = (Main) pageWithName("Main");
		return ((Application) page.application()).pageErreur("LoginNoCasPage", "Service cas indisponible !", null, null, this.context());
	}

	public WOActionResults loginCasSuccessPage(final String arg0, final NSDictionary arg1) {
		return loginCasSuccessPage(arg0);
	}

	public WOActionResults loginNoCasPage(final NSDictionary arg0) {
		return loginNoCasPage();
	}

}